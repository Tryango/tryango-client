#hdr
#include <stdio.h>
#include <stdlib.h>
#if !defined(_MSC_VER)
#include <unistd.h>
#include <sys/wait.h>
#endif
#include <cstring>
#include <string>
#include <iostream>
#include <stdint.h>
#include <time.h>

#include <vector>
#end
class CmdPiper{
 public:
  static std::string command = "gpg";
  static int runCmd(std::string& output, char* const cmd[], const std::string& input){
#if !defined(_MSC_VER)
    int p1[2], p2[2];//, p3[2];
    int n;
    pid_t pid;
    std::cout<<"runCmb 1"<<std::endl;
    pipe(p1);
    std::cout<<"runCmb 2"<<std::endl;
    pipe(p2);
    std::cout<<"runCmb 3"<<std::endl;
/*     pipe(p3); */
    if ((pid = fork()) == 0) { /* child */
      std::cout<<"runCmb child 1"<<std::endl;
      close(p1[1]);
      std::cout<<"runCmb child 2"<<std::endl;
      close(p2[0]);
      std::cout<<"runCmb child 3"<<std::endl;
/*       close(p3[0]); */
      dup2(p1[0], 0); // set stdout of the process to the write end of the pipe
      std::cout<<"runCmb child 4"<<std::endl;
      dup2(p2[1], 1); // set stdin of the process to the read end of the pipe
      std::cout<<"runCmb child 5"<<std::endl;
/*       dup2(p3[1], 2); // set stderr of the process to the read end of the pipe */
      execvp(cmd[0], cmd); // execute the program.
      std::cout<<"runCmb child 6"<<std::endl;
      close(p1[0]);
      std::cout<<"runCmb child 7"<<std::endl;
      close(p2[1]);
      std::cout<<"runCmb child 8"<<std::endl;
/*       close(p3[1]); */
      exit(0);
    }
    else if (pid == -1) { /* failed */
      std::cout<<"runCmb falied 1"<<std::endl;
      exit(-1);
    }
    else { /* parent */
      std::cout<<"runCmb parent 1"<<std::endl;
      close(p1[0]);
      std::cout<<"runCmb parent 2"<<std::endl;
      close(p2[1]);
      std::cout<<"runCmb parent 3"<<std::endl;
/*       close(p3[1]); */
      output.clear();
      std::cout<<"runCmb parent 4"<<std::endl;
      char buf[0x101] = {0};
      std::cout<<"runCmb parent 5"<<std::endl;
      write(p1[1], input.c_str(), input.length());
      std::cout<<"runCmb parent 6"<<std::endl;
      close(p1[1]);          /* Reader will see EOF */
      std::cout<<"runCmb parent 7"<<std::endl;
      do{
        n = read(p2[0], buf, 0x100);
      std::cout<<"runCmb parent while n="<<n<<std::endl;
        if(n<0){
          output.clear();
          return -1;
        }
        else{
          if(n>0){
            output.append(buf,n);
          }
        }
      }
      while (n>0);
      std::cout<<"runCmb parent 8"<<n<<std::endl;
      close(p2[0]);
/*       output.append("error:"); */
/*       do{ */
/*         n = read(p3[0], buf, 0x100); */
/*         if(n>0){ */
/*           output.append(buf,n); */
/*         } */
/*       } */
/*       while (n>0); */
/*       close(p3[0]); */
      int rpid;
      std::cout<<"runCmb parent 9"<<n<<std::endl;
      wait(&rpid);
      std::cout<<"runCmb parent 10"<<n<<std::endl;
      return WEXITSTATUS(rpid);
    }
#else
    return 1;//Not implemented for windows
#endif
  }


  static bool hasGpg(){
#if !defined(_MSC_VER)
    const char *cmd[] = {command.c_str(), "--version", NULL};
    std::string output;
    std::cout<<"Before has gpg"<<std::endl;
    int result = CmdPiper::runCmd(output, (char**)cmd, "");
    std::cout<<"Has gpg result:"<<result<<std::endl<<output<<std::endl;
    return (result == 0) && output.substr(0, 3) == "gpg";
#else
    return false;//Not implemented for windows
#endif
  }


  static int getSecretKey(std::string& output, std::string user){
    const char *cmd[] = {command.c_str(), "--armor", "--export-secret-key", user.c_str(), NULL};
    return CmdPiper::runCmd(output, (char**)cmd, "");
  }


  static int getPublicKey(std::string& output, std::string user){
    const char *cmd[] = {command.c_str(), "--armor", "--export", user.c_str(), NULL};
    return CmdPiper::runCmd(output, (char**)cmd, "");
  }


  static int importKey(std::string key){
    const char *cmd[] = {command.c_str(), "--import", NULL };
    std::string output;
    int status = CmdPiper::runCmd(output, (char**)cmd, key);
    return status;
  }


  static int importPrivateKey(std::string key){
    const char *cmd[] = {command.c_str(), "--allow-secret-key-import" ,"--import", NULL };
    std::string output;
    int status = CmdPiper::runCmd(output, (char**)cmd, key);
    return status;
  }


  static int deleteKey(std::string user){
    std::string output;
    //gpg --delete-key --batch --yes pkordy@gmail.com
    const char *cmd[] = {command.c_str(), "--delete-key", "--batch", "--yes", user.c_str() ,NULL };
    int status = CmdPiper::runCmd(output, (char**)cmd, "");
    return status;
  }


  static int deleteSecretKey(std::string user){
    std::string output;
//for i in `gpg --with-colons --fingerprint pkordy@gmail.com| grep "^fpr" | cut -d: -f10`; do echo $i; gpg --batch --delete-secret-keys "$i" ; done

    std::string scmd = "for i in `gpg2 --with-colons --fingerprint "+user+"| grep \"^fpr\" | cut -d: -f10`; do echo $i; gpg2 --verbose --batch --delete-secret-keys \"$i\" ; done";
    const char *cmd[] = {"bash", NULL };
    int status = CmdPiper::runCmd(output, (char**)cmd, scmd);
    return status;
  }


  /*  gpg --digest-algo sha256 --default-key pkordy@gmail.com --clearsign */
  static int signMsg(std::string &output, const std::string user,
                     const std::string message){
   const char *cmd[] = {command.c_str(), "--digest-algo", "sha256",
                        "--default-key", user.c_str(), "--clearsign"  ,NULL };
    int status = CmdPiper::runCmd(output, (char**)cmd, message);
    return status;
  }


  static int verifySignature(const std::string sender, const std::string message){
    const char *cmd[] = {command.c_str(), "--verify",NULL };
    std::string output;
    int status = CmdPiper::runCmd(output, (char**)cmd, message);
    return status;
  }


  static int encryptMsg(std::string &output, const std::vector<std::string>& users, const std::string message){
    std::vector<char*> cmdVector;
    cmdVector.push_back((char*)command.c_str());
    cmdVector.push_back((char*)"--encrypt");
    cmdVector.push_back((char*)"--armor");
    cmdVector.push_back((char*)"--trust-model");
    cmdVector.push_back((char*)"always");
    cmdVector.push_back((char*)"--batch");
    cmdVector.push_back((char*)"--yes");
    for(std::vector<std::string>::size_type i = 0; i != users.size(); i++) {
      cmdVector.push_back((char*)"--recipient");
      cmdVector.push_back((char*)(users[i]).c_str());
    }
    cmdVector.push_back(NULL);
    char **cmd = &cmdVector[0];
    int status = CmdPiper::runCmd(output, cmd, message);
    return status;
  }


  static int encryptSignMsg(std::string &output, const std::vector<std::string>& users, const std::string sender,
                            const std::string message){
    std::vector<char*> cmdVector;
    cmdVector.push_back((char*)command.c_str());
    cmdVector.push_back((char*)"--encrypt");
    cmdVector.push_back((char*)"--armor");
    cmdVector.push_back((char*)"--sign");
    cmdVector.push_back((char*)"--default-key");
    cmdVector.push_back((char*)sender.c_str());
    cmdVector.push_back((char*)"--trust-model");
    cmdVector.push_back((char*)"always");
    cmdVector.push_back((char*)"--digest-algo");
    cmdVector.push_back((char*)"sha256");
    cmdVector.push_back((char*)"--batch");
    cmdVector.push_back((char*)"--yes");
    for(std::vector<std::string>::size_type i = 0; i != users.size(); i++) {
      cmdVector.push_back((char*)"--recipient");
      cmdVector.push_back((char*)(users[i]).c_str());
    }
    cmdVector.push_back(NULL);
    char **cmd = &cmdVector[0];
    int status = CmdPiper::runCmd(output, cmd, message);
    return status;
  }


  static int decryptMsg(std::string &output, const std::string& user, const std::string message){
    std::cout<<"running decrypt:"<<std::endl;
    const char *cmd[] = {command.c_str(), "--decrypt", "--batch",  NULL };
    int status = CmdPiper::runCmd(output, (char**)cmd,  message);
    std::cout<<"status decrypt:"<<status<<" ouput:"<<output<<std::endl;
    return status;
  }

}
