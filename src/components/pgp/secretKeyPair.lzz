#hdr
#include <fstream>
#include <map> //O(log(n)) access
#include "packet.h"
#include "signKey.h"
#include <openssl/ssl.h>
#include <openssl/err.h>
class PublicKeyPair;
#end
#src
#include "messageHandler.h"
#include "publicKeyDb.h"
#end


class SecretKeyPair
{
 private:
  PKT_secret_key* mainKey;  //used for siging
  PKT_secret_key* subKey;   //used for encryption
  PKT_signature* bindSig;   //signature binding subKey to mainKey
  friend class KeyDb;


  void freeSKey(PKT_secret_key* key)
  {
    if (key != NULL){
      for (auto& it:key->pkey.user_ids){
        if(it != NULL && it->signature != NULL) {
          free(it->signature);
          free(it);
        }
      }
      if(key->pkey.n != NULL)  BN_clear_free(key->pkey.n);
      if(key->pkey.e != NULL) BN_clear_free(key->pkey.e);
      if(!key->is_protected){
        if(key->dBN != NULL) BN_clear_free(key->dBN);
        if(key->pBN != NULL) BN_clear_free(key->pBN);
        if(key->qBN != NULL) BN_clear_free(key->qBN);
        if(key->uBN != NULL) BN_clear_free(key->uBN);
      }
      free(key);
    }
  }


  bool generateRsaKeys(const std::string& sUserId
                       , const std::string& password
                       , const unsigned long size = 4096
                       , const unsigned long eValue = RSA_F4
                       , const time_t validity = 0
                       ){
    RSA* signRsa;
    RSA* encryptRsa;

    bool result = true;
/*     sizeBits = size; */
    BIGNUM *e = BN_new();
    BN_set_word(e, eValue);

    signRsa = newRSA();
    encryptRsa = newRSA();
    if(RSA_generate_key_ex(signRsa, size, e, NULL) != 0){
      if(RSA_check_key(signRsa) == 1){
        if(RSA_generate_key_ex(encryptRsa, size, e, NULL) != 0){
          if(RSA_check_key(encryptRsa) == 1){
/*             userId->isAttribute = false; */
            time_t creationTime = time(0);

            mainKey = new PKT_secret_key;
            if (assignSecKey(mainKey, signRsa, true, creationTime, validity, password) != ANG_OK){
              result = false;
            }
            mainKey->pkey.fingerprint = PktDo::getFingerprint(&(mainKey->pkey));
            subKey = new PKT_secret_key;
            if (assignSecKey(subKey, encryptRsa, false, creationTime, validity, password) != ANG_OK){
              result = false;
            }
            subKey->pkey.fingerprint = PktDo::getFingerprint(&(subKey->pkey));

            PKT_user_id*  userId = new PKT_user_id;
            userId->id = std::string(sUserId);
            userId->signature = NULL;
            if(SignKey::genSelfSignature(&(userId->signature), userId, &(mainKey->pkey), NULL,
                                      signRsa, SGN_CERT_POS, mainKey->pkey.timestamp,
                                         mainKey->pkey.expirePeriod) != ANG_OK){
              result = false;
            }
            if(SignKey::genSelfSignature(&bindSig, userId, &(mainKey->pkey), &(subKey->pkey),
                                      signRsa, SGN_SUBKEY, subKey->pkey.timestamp,
                                         mainKey->pkey.expirePeriod) != ANG_OK){
              result = false;
            }
            if(mainKey != NULL){
              mainKey->pkey.user_ids.push_back(userId);
            }
            result = (result && mainKey != NULL && userId != NULL && subKey != NULL && bindSig  != NULL);
          }
        }
      }
    }
    BN_clear_free(e);
    if(!result){
      SecretKeyPair::freeRSA(signRsa);
      SecretKeyPair::freeRSA(encryptRsa);
    }
    return result;
  }


 public:

/*   static SecretKeyPair* copyKey(SecretKeyPair* key){ */
/*     SecretKeyPair* copy; */
/*     copy = new SecretKeyPair; */
/*     copy->pkey = key->pkey; */
/*     if(key->pkey->n != NULL) copy->pkey.n = BN_dup(key->pkey.n); */
/*     if(key->pkey->e != NULL) copy->pkey.e = BN_dup(key->pkey.e); */
/*     if(!key->is_protected){ */
/*       if(key->dBN != NULL) copy->pkey.dBN = BN_dup(key->pkey.dBN); */
/*       if(key->pBN != NULL) copy->pkey.pBN = BN_dup(key->pkey.pBN); */
/*       if(key->qBN != NULL) copy->pkey.qBN = BN_dup(key->pkey.qBN); */
/*       if(key->uBN != NULL) copy->pkey.uBN = BN_dup(key->pkey.uBN); */
/*     } */
/*     else{ */
/*     } */
/*     copy->pkey.user_ids.clear(); */
/*     for (auto& it:key->pkey.user_ids){ */
/*       if(it != NULL && it->signature != NULL) { */
/*         PKT_user_id* ui = new PKT_user_id; */
/*         ui->id = it->id; */
/*         PKT_signature *sig = new PKT_signature; */
/*         copy->signature = key->signature; */
/*         copy->pkey.user_ids.push_back(ui); */
/*       } */
/*     } */
/*     copy->is_protected = key->is_protected; */
/*     copy->protect = key->protect; */
/*     copy->csum = key->csum; */
/*     copy->encryptedData = key->encryptedData; */
/*   } */


  static RSA* newRSA()
  {
    RSA* rsa = RSA_new();
    rsa->n=NULL;
    rsa->e=NULL;
    rsa->d=NULL;
    rsa->p=NULL;
    rsa->q=NULL;
    rsa->iqmp=NULL;
    rsa->dmp1 = NULL;
    rsa->dmq1 = NULL;
    rsa->engine = NULL;
    return rsa;
  }


  static void freeRSA(RSA* rsa)
  {
    if (rsa->n!=NULL){
      BN_clear_free(rsa->n);
      rsa->n = NULL;
    }
    if (rsa->e!=NULL){
      BN_clear_free(rsa->e);
      rsa->e = NULL;
    }
    if (rsa->d!=NULL){
      BN_clear_free(rsa->d);
      rsa->d = NULL;
    }
    if (rsa->p!=NULL){
      BN_clear_free(rsa->p);
      rsa->p = NULL;
    }
    if (rsa->q!=NULL){
      BN_clear_free(rsa->q);
      rsa->q = NULL;
    }
    if (rsa->iqmp!=NULL){
      BN_clear_free(rsa->iqmp);
      rsa->iqmp = NULL;
    }
    if (rsa->dmp1!=NULL){
      BN_clear_free(rsa->dmp1);
      rsa->dmp1 = NULL;
    }
    if (rsa->dmq1!=NULL){
      BN_clear_free(rsa->dmq1);
      rsa->dmq1 = NULL;
    }
    RSA_free(rsa);
  }


  /* Decrypts secret data using specified algorithm and session key */
  static Confi_Status decryptData(std::string& decrypted
                                  , const std::string& encrypted
                                  , const std::string& sessionKey
                                  , const uint8_t* iv
                                  , PKT_CipherAlgo algo
                                  ){
    Confi_Status status = ANG_OK;
    EVP_CIPHER_CTX *de = (EVP_CIPHER_CTX *)malloc(sizeof(EVP_CIPHER_CTX));
    if(de == NULL){
      return ANG_FAIL_MALLOC;
    }
    EVP_CIPHER_CTX_init(de);
#if defined(_MSC_VER)
    unsigned char *plaintext = new unsigned char[encrypted.size()];
#else
    unsigned char plaintext[encrypted.size()];
#endif
    if(sessionKey.size() != PktDo::keySize(algo)){
      status = ANG_PARSE_ERROR;
    }

    if(status  == ANG_OK){
      switch(algo){

      case CIPHER_ALGO_AES256:   // - AES with 256-bit key
        if(EVP_DecryptInit_ex(de, EVP_aes_256_cfb(), NULL, (unsigned const char*)sessionKey.c_str(), iv) == 0){
          status = ANG_PARSE_ERROR;
          break;
        }
        break;

      case CIPHER_ALGO_CAST5:   // - CAST5 (128 bit key, as per [RFC2144])
        if(EVP_DecryptInit_ex(de, EVP_cast5_cfb(), NULL, (unsigned const char*)sessionKey.c_str(), iv) == 0){
          status = ANG_PARSE_ERROR;
          break;
        }
        break;

      case CIPHER_ALGO_BLOWFISH:   // - Blowfish (128 bit key, 16 rounds) [BLOWFISH]
        if(EVP_DecryptInit_ex(de, EVP_bf_cfb(), NULL, (unsigned const char*)sessionKey.c_str(), iv) == 0){
          status = ANG_PARSE_ERROR;
          break;
        }
        break;

      case CIPHER_ALGO_AES:   // - AES with 128-bit key [AES]
        if(EVP_DecryptInit_ex(de, EVP_aes_128_cfb(), NULL, (unsigned const char*)sessionKey.c_str(), iv) == 0){
          status = ANG_PARSE_ERROR;
          break;
        }
        break;

      case CIPHER_ALGO_AES192:   // - AES with 192-bit key
        if(EVP_DecryptInit_ex(de, EVP_aes_192_cfb(), NULL, (unsigned const char*)sessionKey.c_str(), iv) == 0){
          status = ANG_PARSE_ERROR;
          break;
        }
        break;

      default:
        status = ANG_KEY_ALG_NOT_SUPPORTED;
        break;
      }
      unsigned int outSize=0;
      int tempSize;
      if(status == ANG_OK){
        if(EVP_DecryptUpdate(de, plaintext, &tempSize, (unsigned char*)encrypted.c_str(), encrypted.size()) == 0){
          status = ANG_PARSE_ERROR;
        }
      }
      if(status == ANG_OK){
        outSize += tempSize;
        if(EVP_DecryptFinal_ex(de, (plaintext + outSize), &tempSize) == 0){
          status = ANG_PARSE_ERROR;
        }
        if(outSize != encrypted.size()){
          status = ANG_PARSE_ERROR;
        }
        if(status == ANG_OK){
          outSize += tempSize;
          decrypted = std::string((char*)plaintext, outSize);
        }
      }
    }
    EVP_CIPHER_CTX_cleanup(de);
#if defined(_MSC_VER)
    delete [] plaintext;
#endif
    return status;
  }


  static Confi_Status mpistr2Bn(BIGNUM** num
                                , unsigned int&  mpiSize
                                , const std::string& input)
  {
    mpiSize = ((0xFF & input.at(0))*256 + (0xFF & input.at(1)) + 7)/8;
    if(mpiSize> input.size()) return ANG_PARSE_ERROR;
    BIGNUM* check;
    if(*num == NULL) *num = BN_new();
    check = BN_bin2bn((unsigned char*)input.substr(2, mpiSize).c_str(), mpiSize, *num);
    if(check == NULL){
      BN_clear_free(*num);
      *num = NULL;
      return ANG_PARSE_ERROR;
    }
    mpiSize += 2; //add initial two bytes holding size
    return ANG_OK;
  }


  static Confi_Status mpi2Rsa(RSA* rsa
                              , const std::string& input
                              , bool sha1chk){
    if(sha1chk){
      std::string hash = SignKey::hash(input.substr(0, input.size() - 20), DIGEST_ALGO_SHA1);
      if(hash.compare(input.substr(input.size() - 20))){
          std::cout<<"Wrong hash -should be: "<<string_to_hex(hash)<< std::endl;
          std::cout<<"            but is   : "<< string_to_hex(input.substr(input.size() - 20))<<std::endl;
          return ANG_WRONG_PASSWORD;
      }
    }
    else{
      uint16_t csum = PktDo::checksum(input.substr(0, input.size() - 2));
      if((((csum>>8)&0xFF) != input.at(input.size()-2)) ||((csum&0xFF) != input.at(input.size()-1)) )
      {
        std::cout<<"wrong checksum"<<std::endl;
        return ANG_WRONG_PASSWORD;
      }
    }
    unsigned int bytes;
    Confi_Status status = mpistr2Bn(&(rsa->d), bytes, input);
    unsigned int total = bytes;
    if(status != ANG_OK) return status;
    status = mpistr2Bn(&(rsa->p), bytes, input.substr(total));
    total += bytes;
    if(status != ANG_OK) return status;
    return (mpistr2Bn(&(rsa->q), bytes, input.substr(total)));
    //we do not read u as RSA structure does not have place for it
  }


  Confi_Status checkPassword(const std::string& password){
    if(!mainKey->is_protected) return ANG_OK;
    if(password.size() < 1) return ANG_WRONG_PASSWORD;
    Confi_Status status = ANG_OK;
    std::string sessionKey = hashPassword(password, mainKey->protect.algo, mainKey->protect.s2k);
    std::string decrypted;
    status = decryptData(decrypted, mainKey->encryptedData, sessionKey, mainKey->protect.iv, mainKey->protect.algo);
    if(status != ANG_OK) return status;
    if(mainKey->protect.sha1chk){
      std::string hash = SignKey::hash(decrypted.substr(0, decrypted.size() - 20), DIGEST_ALGO_SHA1);
      if(hash.compare(decrypted.substr(decrypted.size() - 20))){
          return ANG_WRONG_PASSWORD;
      }
    }
    else{
      uint16_t csum = PktDo::checksum(decrypted.substr(0, decrypted.size() - 2));
      if((((csum>>8)&0xFF) != decrypted.at(decrypted.size() - 2)) ||((csum&0xFF) != decrypted.at(decrypted.size() - 1)) )
      {
        return ANG_WRONG_PASSWORD;
      }
    }
    unsigned int mpiSize = ((0xFF & decrypted.at(0)) * 256 + (0xFF & decrypted.at(1)) + 7) / 8;
    if(mpiSize > decrypted.size()) return ANG_WRONG_PASSWORD;
    return ANG_OK;
  }


  static Confi_Status getRsaSecretKey(RSA* rsa
                                      , PKT_secret_key* sk
                                      , std::string password
                                      ){
    if(rsa == NULL) return ANG_PARSE_ERROR;
    if(sk->is_protected && password.size() < 1) return ANG_WRONG_PASSWORD;
    if(rsa->n != NULL) BN_free(rsa->n);
    if(rsa->e != NULL) BN_free(rsa->e);
    if(rsa->d != NULL) BN_clear_free(rsa->d);
    if(rsa->p != NULL) BN_clear_free(rsa->p);
    if(rsa->q != NULL) BN_clear_free(rsa->q);
    if(rsa->iqmp != NULL) BN_clear_free(rsa->iqmp);
    if(rsa->dmq1 != NULL) BN_clear_free(rsa->dmq1);
    if(rsa->dmp1 != NULL) BN_clear_free(rsa->dmp1);
    rsa->n = BN_new();
    rsa->e = BN_new();
    rsa->d = BN_new();
    rsa->p = BN_new();
    rsa->q = BN_new();
    rsa->iqmp = BN_new();
    rsa->dmp1 = BN_new();
    rsa->dmq1 = BN_new();
    rsa->n = BN_dup(sk->pkey.n);
    rsa->e = BN_dup(sk->pkey.e);
    if(sk->is_protected){
      std::string sessionKey = hashPassword(password, sk->protect.algo, sk->protect.s2k);
      Confi_Status status = ANG_OK;
      std::string decrypted;
      status = decryptData(decrypted, sk->encryptedData, sessionKey, sk->protect.iv, sk->protect.algo);
      if(status == ANG_OK){
        status = mpi2Rsa(rsa, decrypted, sk->protect.sha1chk);//assigns d p q
      }
      if(status != ANG_OK) return status;
    }
    else{
       rsa->d = BN_dup(sk->dBN);
       rsa->p = BN_dup(sk->pBN);
       rsa->q = BN_dup(sk->qBN);
    }
/*     rsa->iqmp = BN_dup(sk->u); */

    BN_CTX *ctx;
    ctx = BN_CTX_new();
    BN_CTX_start(ctx);
    BIGNUM *r1=NULL,*r2=NULL;
    r1 = BN_CTX_get(ctx);
    r2 = BN_CTX_get(ctx);
    BN_sub(r1, rsa->p, BN_value_one());
    BN_sub(r2, rsa->q, BN_value_one());
    /* calculate d mod (p-1) */
    BN_mod(rsa->dmp1, rsa->d, r1, ctx);
    /* calculate d mod (q-1) */
    BN_mod(rsa->dmq1, rsa->d, r2, ctx);
    BN_mod_inverse(rsa->iqmp, rsa->q, rsa->p, ctx);
    rsa->engine = NULL;
/*     BN_bin2bn((unsigned char *)u.c_str(), u.size(), rsa.iqmp); */
/*     printf("rsa check %d",RSA_check_key(rsa)); */
    if (ctx != NULL) {
      BN_CTX_end(ctx);
      BN_CTX_free(ctx);
    }
    return ANG_OK;
  }


  static void assignPubKey(PKT_public_key* key
                          , const RSA* rsaKey
                          , const bool isPrimary
                          , const time_t creationTime
                          , const time_t validity
                          ){
    key->timestamp = creationTime;
    key->expirePeriod = validity;
    key->version = 4u;
    key->is_primary = isPrimary;
    key->is_valid = 1;
    key->pubkey_algo = PUBKEY_ALGO_RSA;
    key->e = BN_dup(rsaKey->e);
    key->n = BN_dup(rsaKey->n);
  }


  static inline unsigned long decodeCount(uint32_t count)
  {
    return ((16ul + ((count) & 15)) << (((count) >> 4) + 6));
  }


  static std::string hashPassword(std::string pw
                                   , PKT_CipherAlgo algo
                                   , STRING2KEY s2k
                                   ){
    std::string sesKey;
    unsigned int keyLen = PktDo::keySize(algo);
    unsigned char mdValue[EVP_MAX_MD_SIZE];
    const EVP_MD *md = SignKey::getHashType(s2k.hash_algo);
    if(md == NULL) return "";
    EVP_MD_CTX *mdctx;
    mdctx = EVP_MD_CTX_create();
    unsigned int mdLen;
    int status = 1;
    int pass, i;
    unsigned int used = 0;
    status = EVP_DigestInit_ex(mdctx, md, NULL);
    if(!status) goto Error;

    for(pass = 0; used < keyLen; pass++ ) {
      if(pass) {
        status = EVP_DigestInit_ex(mdctx, md, NULL);
        if(!status) goto Error;
        for(i = 0; i < pass; i++ ){ /* preset the hash context */
          status = EVP_DigestUpdate(mdctx, (unsigned char*)"\x00", 1);
          if(!status) goto Error;
        }
      }
      if(s2k.mode == 1 || s2k.mode == 3 ) {
        unsigned int len2 = pw.size() + 8;
        unsigned long count = len2;

        if( s2k.mode == 3 ) {
          count = decodeCount(s2k.count);
          if( count < len2 )
            count = len2;
          }
        /* a little bit complicated because we need a ulong for count */
        while( count > len2 ) { /* maybe iterated+salted */
          status = EVP_DigestUpdate(mdctx, (unsigned char*)s2k.salt, 8);
          if(!status) goto Error;
          status = EVP_DigestUpdate(mdctx, (unsigned char*)pw.c_str(), pw.size());
          if(!status) goto Error;
          count -= len2;
        }
        if( count < 8 ){
          status = EVP_DigestUpdate(mdctx, (unsigned char*)s2k.salt, count);
          if(!status) goto Error;
        }
        else {
          status = EVP_DigestUpdate(mdctx, (unsigned char*)s2k.salt, 8);
          if(!status) goto Error;
          count -= 8;
          status = EVP_DigestUpdate(mdctx, (unsigned char*)pw.c_str(), count);
          if(!status) goto Error;
        }
      }
      else{
        status = EVP_DigestUpdate(mdctx, (unsigned char*)pw.c_str(), pw.size());
        if(!status) goto Error;
      }
      if(!EVP_DigestFinal_ex(mdctx, mdValue, &mdLen)) goto Error;

/*     i = hashSize; */
      if( mdLen > keyLen - used ){
          mdLen = keyLen - used;
      }
      sesKey.append(std::string((char*)mdValue, mdLen));
      used += mdLen;

    }

    EVP_MD_CTX_destroy(mdctx);
    return sesKey;
  Error:
    EVP_MD_CTX_destroy(mdctx);
    return "";
  }


  static Confi_Status encryptSecretData(std::string& result
                                       , const RSA* rsaKey
                                       , std::string password
                                       , PKT_CipherAlgo algo
                                       , STRING2KEY s2k
                                       , const uint8_t* iv
                                       ){
    BN_CTX *ctx = NULL;
    BIGNUM* u = BN_new();
    ctx = BN_CTX_new();
    BN_CTX_start(ctx);
    BN_mod_inverse(u, rsaKey->p, rsaKey->q, ctx);
    std::string toEncrypt;
    toEncrypt.append(PktDo::bn2mpi(rsaKey->d));
    toEncrypt.append(PktDo::bn2mpi(rsaKey->p));
    toEncrypt.append(PktDo::bn2mpi(rsaKey->q));
    toEncrypt.append(PktDo::bn2mpi(u));
    std::string hash = SignKey::hash(toEncrypt, DIGEST_ALGO_SHA1);
    toEncrypt.append(hash);

    std::string sessionKey = hashPassword(password, algo, s2k);

    Confi_Status status = ANG_OK;
    EVP_CIPHER_CTX *de = (EVP_CIPHER_CTX *)malloc(sizeof(EVP_CIPHER_CTX));
    EVP_CIPHER_CTX_init(de);

    switch(algo){
    case CIPHER_ALGO_AES256:   // - AES with 256-bit key
      if(EVP_EncryptInit_ex(de, EVP_aes_256_cfb(), NULL, (unsigned const char*)sessionKey.c_str(),
                            (unsigned const char*)iv) == 0){
        status = ANG_FAIL_ENCODE;
      }
      break;
    case CIPHER_ALGO_CAST5:   // - CAST5 (128 bit key, as per [RFC2144])
      if(EVP_EncryptInit_ex(de, EVP_cast5_cfb(), NULL, (unsigned const char*)sessionKey.c_str(),
                            (unsigned const char*)iv) == 0){
        status = ANG_FAIL_ENCODE;
      }
      break;
    case CIPHER_ALGO_BLOWFISH:   // - Blowfish (128 bit key, 16 rounds) [BLOWFISH]
      if(EVP_EncryptInit_ex(de, EVP_bf_cfb(), NULL, (unsigned const char*)sessionKey.c_str(),
                            (unsigned const char*)iv) == 0){
        status = ANG_FAIL_ENCODE;
      }
      break;
    case CIPHER_ALGO_AES:   // - AES with 128-bit key [AES]
      if(EVP_EncryptInit_ex(de, EVP_aes_128_cfb(), NULL, (unsigned const char*)sessionKey.c_str(),
                            (unsigned const char*)iv) == 0){
        status = ANG_FAIL_ENCODE;
      }
      break;
    case CIPHER_ALGO_AES192:   // - AES with 192-bit key
      if(EVP_EncryptInit_ex(de, EVP_aes_192_cfb(), NULL, (unsigned const char*)sessionKey.c_str(),
                            (unsigned const char*)iv) == 0){
        status = ANG_FAIL_ENCODE;
      }
      break;
    default:
      status = ANG_KEY_ALG_NOT_SUPPORTED;
    }
    unsigned int blSize = PktDo::blockSize(algo);
    if(blSize <1) status = ANG_KEY_ALG_NOT_SUPPORTED;
    if(status == ANG_OK){
      status = MessageHandler::encryptUpdate(result, toEncrypt, de);
      if(status == ANG_OK){
#if defined(_MSC_VER)
        unsigned char *plaintext = new  unsigned char[blSize+1];
#else
        unsigned char plaintext[blSize+1];
#endif
        int outSize;
        if(EVP_EncryptFinal_ex(de, plaintext, &outSize) == 0){
          EVP_CIPHER_CTX_cleanup(de);
#if defined(_MSC_VER)
          delete [] plaintext;
#endif
          return ANG_FAIL_ENCODE;
        }
        if(outSize>0){
          result.append(std::string((char*)plaintext, outSize));
        }
#if defined(_MSC_VER)
        delete [] plaintext;
#endif
      }

    }
    EVP_CIPHER_CTX_cleanup(de);

    return status;
  }


  static Confi_Status assignSecKey(PKT_secret_key* key
                                   , const RSA* rsaKey
                                   , const bool isPrimary
                                   , const time_t creationTime
                                   , const time_t validity
                                   , std::string password
                                   , PKT_CipherAlgo algo = CIPHER_ALGO_AES256
                                   , unsigned int count = 200 /*equivalent to hashing 6.3MB of data */
                                   , PKT_DigestAlgo hashAlgo = DIGEST_ALGO_SHA256
                                   ){
    Confi_Status status = ANG_OK;
    assignPubKey(&(key->pkey), rsaKey, isPrimary, creationTime, validity);
    BN_CTX *ctx = NULL;
    if(password.size() < 1){
      key->is_protected = false;
      key->protect.s2k.mode = 0; /*no encryption*/
      key->dBN = BN_dup(rsaKey->d);
      key->pBN = BN_dup(rsaKey->p);
      key->qBN = BN_dup(rsaKey->q);
      uint16_t csum = 0;
      csum += PktDo::checksum(PktDo::bn2mpi(rsaKey->d));
      csum += PktDo::checksum(PktDo::bn2mpi(rsaKey->p));
      csum += PktDo::checksum(PktDo::bn2mpi(rsaKey->q));
      ctx = BN_CTX_new();
      BN_CTX_start(ctx);
      key->uBN = BN_new();
      BN_mod_inverse(key->uBN, rsaKey->p, rsaKey->q, ctx);
      csum += PktDo::checksum(PktDo::bn2mpi(key->uBN));
      key->csum = csum;
    }
    else{
      key->is_protected = true;
      key->protect.sha1chk = true;
      key->protect.algo = algo;
      //key->protect.s2k.salt = random data
      memcpy(key->protect.s2k.salt, MessageHandler::getRandomString(8).c_str(), 8);
      key->protect.s2k.mode = 3; /*salted and iterated*/
      key->protect.s2k.count = count;
      key->protect.s2k.hash_algo = hashAlgo;
      memcpy(key->protect.iv, MessageHandler::getRandomString(16).c_str(), 16);
      key->dBN = NULL;
      key->qBN = NULL;
      key->pBN = NULL;
      key->uBN = NULL;

      status = encryptSecretData(key->encryptedData, rsaKey, password, algo, key->protect.s2k, key->protect.iv);
    }

    if (ctx != NULL){
      BN_CTX_end(ctx);
      BN_CTX_free(ctx);
    }
    return status;
  }


  SecretKeyPair()
  {
    mainKey = NULL;
    subKey = NULL;
    bindSig = NULL;
  }


  virtual ~SecretKeyPair()
  {
    freeSKey(mainKey);
    freeSKey(subKey);
    if(bindSig != NULL) free(bindSig);
  }


  bool exportPair(std::string& result, bool exportSecret = false, bool armor = false){
    if(mainKey == NULL ||  subKey == NULL || bindSig == NULL) return false;
    if (exportSecret){
      result.append(PktDo::secKey2Str(mainKey));
    }
    else{
      result.append(PktDo::pubKey2Str(&(mainKey->pkey)));
    }
    for (auto& it:mainKey->pkey.user_ids){
      result.append(PktDo::userId2Str(it));
      result.append(PktDo::signature2Str(it->signature));
    }
    if (exportSecret){
      result.append(PktDo::secKey2Str(subKey));
    }
    else{
      result.append(PktDo::pubKey2Str(&(subKey->pkey)));
    }
    result.append(PktDo::signature2Str(bindSig));
    if(armor){
      result = MessageHandler::putArmor(result);
    }
    return true;
  }


  bool exportPairToFile(std::string fileName
                        , bool exportSecret){
    std::string keyString;
    if(exportPair(keyString, exportSecret)){
      std::ofstream myfile;
      myfile.open (fileName);
      if(!myfile.is_open()) return false;
      myfile << keyString;
      myfile.close();
      return true;
    }
    return false;
  }


  std::vector<PKT_user_id*> getUserIds()
  {
    if(mainKey != NULL){
      return mainKey->pkey.user_ids;
    }
    else{
      return std::vector<PKT_user_id*>();
    }
  }


  PKT_secret_key* getSSKey(){
    return mainKey;
  }


  void setSSKey(PKT_secret_key* key){
    mainKey = key;
  }


  void setSEKey(PKT_secret_key* key){
    subKey = key;
  }


  PKT_secret_key* getSEKey(){
    return subKey;
  }


  void setBindSig(PKT_signature* sig){
    bindSig = sig;
    if(subKey != NULL && sig->key_expirePeriod != 0){
      subKey->pkey.expirePeriod = sig->key_expirePeriod;
    }
  }


  PKT_signature* getBindSig(){
    return bindSig;
  }

  PKT_public_key* getPSKey(){
    if (mainKey != NULL){
      return &(mainKey->pkey);
    }
    else{
      return NULL;
    }
  }


  time_t getTimestamp(){
    if(mainKey != NULL){
      return mainKey->pkey.timestamp;
    }
    else return 0;
  }

/*   time_t getUserSigTimestamp(const std::string& userId){ */
/*     if(mainKey != NULL){ */
/*       for(PKT_user_id* uid: mainKey->pkey.user_ids){ */
/*         if(userId==uid->id){ */
/*           return uid->signature->timestamp; */
/*         } */
/*       } */
/*     } */
/*     return 0; */
/*   } */

/*   Confi_Status updateUserSigTimestamp(const std::string& userId */
/*                                       , const std::string& password */
/*                                       ){ */
/*     if(mainKey != NULL){ */
/*       for(PKT_user_id* uid: mainKey->pkey.user_ids){ */
/*         if(userId==uid->id){ */
/*           PKT_signature* sig = uid->signature; */
/*           sig->timestamp = time(0); */
/*           RSA* skRsa = newRSA(); */
/*           Confi_Status status = getRsaSecretKey(skRsa, getSSKey(), password); */
/*           if(status == ANG_OK){ */
/*             status = SignKey::updateSignature(sig, uid, &(mainKey->pkey), NULL, skRsa); */
/*           } */
/*           freeRSA(skRsa); */
/*         } */
/*       } */
/*     } */
/*     return ANG_NO_KEY_PRESENT; */
/*   } */


  std::string getFingerprint(){
    if(mainKey != NULL){
      return mainKey->pkey.fingerprint;
    }
    else return "";
  }


  std::string getSubFingerprint(){
    if(subKey != NULL){
      return subKey->pkey.fingerprint;
    }
    else return "";
  }


  std::string getKeyId(){
    if(mainKey != NULL){
      return mainKey->pkey.fingerprint.substr(12,8);
    }
    else return "";
  }


  std::string getSubKeyId(){
    if(subKey != NULL){
      return subKey->pkey.fingerprint.substr(12,8);
    }
    else return "";
  }

  bool isCorrespondingKey(PublicKeyPair* key){
    PKT_public_key* pk = key->getPEKey();
    if(pk->fingerprint != getSEKey()->pkey.fingerprint){
      std::cout<<"different fp "<<string_to_hex(pk->fingerprint) <<" != "<<string_to_hex(getSEKey()->pkey.fingerprint)<<std::endl;
      return false;
    }
    if(BN_cmp(pk->n, getSEKey()->pkey.n) != 0) return false;
    if(BN_cmp(pk->e, getSEKey()->pkey.e) != 0) return false;
    return true;
  }
}
