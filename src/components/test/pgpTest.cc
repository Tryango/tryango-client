#include "common.hpp"
#include "angClient.h"
#include "secretKeyPair.h"
#include "keyDb.h"
// #include "angPipe.h"
// #ifdef __cplusplus
// extern "C" {
// #endif
// // #include "rsa/bigd.h"
// #ifdef __cplusplus
// }
// #endif
// #include "gtest/gtest.h"
#include <openssl/bio.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>

/**********************************************
 * Test of parse_packet.lzz
 **********************************************/
const std::string privateKey ="-----BEGIN PGP PRIVATE KEY BLOCK-----\n"
"Version: GnuPG v1\n"
"\n"
"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\n"
"OwdOrhpGSk+HwBuQ92dsMrbp7IBn8FCSdHae8Sc=\n"
"=TYEy\n"
"-----END PGP PRIVATE KEY BLOCK-----";

const std::string publicKey ="-----BEGIN PGP PRIVATE KEY BLOCK-----\n"
"Version: GnuPG v1\n"
"\n"
"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\n"
"=ByRn\n"
"-----END PGP PUBLIC KEY BLOCK-----\n";

const std::string n = std::string(
"\xc0\xf3\x1d\xb7\xee\x2a\xa4\x87\xac\x4e\xe2\x1d\x19\x7e\x82\xcd\xfd\x42\x73\xbf\x54\x6e\x36\xc6\x11\xc1\x2c\xf4\x4f\xaf\xb7\x53\x6b\x7c\xad\x22\x5f\x74\xf1\x3d\x88\xaf\xca\xc3\xa0\x6a\x17\x1d\xa7\x21\x74\x62\xd9\xd7\x19\xd8\x7a\x98\x15\x0c\x38\x30\xd2\x2b\x43\xae\x2d\x8d\x97\x80\x77\x19\x18\xce\x66\x69\x48\x44\x66\x5a\x56\x76\x23\x84\xbe\x86\xfd\xee\xc2\x8b\x5f\xf9\xba\x1c\xc1\x31\x6e\xaf\x41\x88\x7a\x74\x7b\x1b\xc3\x93\x04\x27\x47\x29\x4e\x88\x82\x78\x08\xb4\xa1\xb9\x26\x40\xd5\x0b\x8e\x49\x2b\xea\x86\x52\xa3\x27\xa6\xca\x99\x14\x5a\x3b\x5e\xfd\x66\xcb\x4a\x6e\xf5\xa0\xec\x88\xb3\x2b\x4d\x90\xbd\x0a\xbe\x10\xf2\x94\xa6\xdb\x4e\x8b\x13\x29\xeb\xdb\x49\x71\xd6\x74\xcf\x37\x5b\x85\x71\x6a\x33\xc7\x16\x54\x6f\xc7\x50\xef\x55\x6b\x7e\x27\xe2\x6a\x56\x95\xb6\x62\x8d\x17\xbb\xff\x13\x58\x74\x8b\xd2\x7a\x7c\x23\x20\x17\xc9\xb6\xb0\x15\x5c\xff\x78\x1f\x1d\x94\x57\x70\x0e\x4a\xb9\x20\xbc\xec\x90\x2f\x15\x2f\x10\x42\x4c\xe9\xa5\xbb\x5e\xce\xd3\x62\xb6\xb8\xc9\x9e\x98\x66\xaf\x11\x06\xfc\x0f\x25\x44\x81\x9d\xe9\x2e\xe6\x8e\xe8\xc8\x6b\xf5\x0e\x35\x25\x79\xba\x69\x33\x68\x5b\x7c\x9b\x91\x7f\x68\xed\x5e\x30\x25\x87\xc8\xc6\xce\xb0\x4d\x99\xd6\x4f\x3d\xcb\x5d\x08\xf4\x4f\x3d\x08\xdc\xfa\x65\xca\x24\x49\x4f\xf8\x9a\x44\x09\xf1\xbc\xf1\x2e\xf7\xfc\x95\x1c\x71\xb0\x9f\xfc\x99\xfe\xc2\xce\x3f\x64\xf8\xf9\xf7\xb9\x2f\x3c\xc1\x82\x82\x95\xcf\x5d\x14\x7c\xc5\xa7\xd1\x78\x7f\xda\xb9\x73\xa7\x0c\x0c\x37\x3b\xca\xc3\x44\xdb\xf1\xf0\xd4\xaa\x62\x6b\x19\xd5\x1b\x68\xb3\x9d\xff\x1f\xda\x45\x2e\xe1\xc8\x8c\x24\xfa\x62\x04\xd0\x9b\x06\x2d\x1b\x69\x94\x89\xd0\x2c\x1e\x27\x93\xce\x41\xae\x30\x56\x8f\x7a\x97\xca\x3d\x84\xf9\xf2\x92\xf2\x5d\x37\xfc\x5b\x65\x26\xb0\xcc\x19\xa5\x99\x15\xa4\xff\x86\x0f\x5f\xef\x53\xbd\x39\x67\x2e\x6f\xfe\x4a\x2d\x79\x1e\x01\xe8\xf7\x0e\xea\xb7\x7f\xfc\x08\x94\xc3\xe3\x6f\xc3\x83\x3e\x45\x3c\x75\x35\x9d\x84\x0c\x87\x6a\x75\xd1\xdf\xd7\x71\xdb\xd9\x97\xb4\xd6\x4b\x83\xb6\xa6\x77\xc5\xef\x9b\xe6\x60\xb1\x68\x26\xb3\x94\x46\x0e\x96\x48\x9a\x58\xe0\x4e\xd7\x6a\xe5\x81\xaf\xc3\x42\x5a\xa1\x5f\x31\x33\xa8\x06\x7c\xf8\x91"
, 512);

const std::string e = std::string("\x01\x00\x01", 3);

const std::string d = std::string(
"\x15\x5f\x78\xc5\xc4\x84\x85\xb8\x1f\x9e\x97\x4e\x68\xe2\x0a\x24\x3e\x2f\x0b\xba\x40\x64\x7a\xfd\xc2\xbe\xb6\xb7\x93\x52\x20\x09\x06\x09\x87\xf6\x1c\x43\xcc\x6b\x28\x06\x6c\xfb\xf1\x7b\x7e\xf7\x02\x69\xe2\xc6\x06\x62\x5c\xd3\x0d\x75\x66\x33\x75\xcf\xf6\x9f\xe3\x3d\xda\x7e\xea\x2e\xc9\x42\x86\xec\x6a\x0c\xb4\x7c\x1b\x28\x5b\x96\x77\x85\xbf\x43\x1d\xc2\xc2\x5b\x04\xf5\x19\x28\x11\x40\x64\x05\xd6\xc9\x02\xe3\x7f\x35\x8a\x9a\xf0\xe5\x56\xed\x1c\xed\x63\x22\x5f\xb8\x7e\x87\x8f\x54\xb4\x24\xb5\x0c\xa6\xe8\x32\x1b\xda\x45\xcc\xa4\x79\x83\x77\x21\x47\x7a\xe3\x55\x96\x77\xa7\x0e\xbd\xd4\xc0\xa0\x05\xd6\x08\x12\xb6\x0e\x13\x88\xe2\xd8\xbd\x21\x0b\xac\xe3\x9a\xe5\x4e\x4e\x56\x9f\x13\x7f\x38\x4f\x61\x57\xbd\xf0\x5b\xc7\x0b\xf9\x8b\xa1\x57\x28\x60\xcb\xa4\x42\xd6\x0f\x9f\x68\x08\x9e\x82\xf9\x46\x1d\x96\xd5\x68\x4a\xf2\xeb\x1d\xa7\x72\xec\x9b\x59\x33\x55\x3f\x81\x1b\xca\xf9\xb7\x23\x90\xd1\x2f\x0c\x37\x46\x77\xde\xc0\x3a\xcf\xe1\x3b\xc1\xff\x15\x02\xf6\x56\xce\x2e\x4b\x3a\x8f\x79\x49\xf6\x0f\x9a\xaf\xe2\xa0\x46\xf9\x2b\x00\x1e\xa9\x8a\x6d\x80\x60\xc9\x94\x77\xb6\x35\xb1\x85\x43\x89\x7d\x34\x30\xb2\x58\x96\xd5\x46\xe7\x8d\x58\x09\x51\x8c\xb2\x76\x5e\x54\xd4\x30\x38\x30\x94\x21\xf8\x14\x7a\x7b\x35\x63\x56\xe0\x6a\x4b\xc8\xef\xc8\x05\xbd\xff\x9d\x24\x98\xe9\xd9\x14\x6b\x3d\xe3\xac\xb4\x43\x0c\x5c\x08\x0a\xf4\xa7\x6f\x8a\xd2\xeb\x27\x79\xe1\xe6\x9f\x00\x74\xa6\xa7\xf9\x25\xb4\xdf\xec\x60\xcc\xbc\x69\x26\x00\x1e\xde\xe5\x56\x38\xf7\x69\xcd\x94\x48\xae\xf3\x7b\x46\xed\xf9\x55\x0c\x20\x5c\xf3\x39\x58\xe4\xdc\x70\x40\xca\x34\xd6\xa2\x02\x8f\xb0\xc8\x6b\x2f\x96\x33\x52\x79\xb9\x7e\x64\xc8\x1a\xc3\x9e\xce\x84\x47\x65\xa2\x7b\xa1\xb4\xde\xa1\xca\xf6\xe6\xae\xf1\xf0\xab\x46\x58\x6e\x13\x37\x17\x11\xea\xef\x28\x49\x69\xe8\xe7\x09\xc7\x25\xf1\x8e\xd7\x26\xd3\x92\x3a\x55\x52\x2d\xa1\x40\xeb\x62\x1e\x6a\x8f\x5a\x07\xed\xe1\xc5\x36\x45\x76\x80\x3d\x9a\x0a\x61\x8a\x8e\x9f\x4c\x57\xd8\xc0\x3c\x4d\xf1\x68\x02\xaf\x76\x46\x32\x78\x9a\xb2\xe3\xe9\xa9\xef\x1a\xb9\x82\xfe\x16\x0f\x1f\x6a\x1b\x5a\xa5\x6a\x5e\xde\x8a\x0a\xa4\xec\x90\x4c\xa3\x1a\x4b\x17"
, 512);
const std::string p = std::string(
"\xce\x4b\x37\x47\x91\xdc\x34\x05\x16\x56\xfd\xbd\xa7\x9f\xf4\x07\xba\x66\x03\x41\x0a\xcf\xfd\x79\x98\x34\xc6\xdc\x20\xea\x03\x54\x85\x44\x52\x25\xd7\xf5\x07\x8b\xdd\xac\x7e\x9c\x11\x47\x32\x2c\x7a\xe4\x4c\x5d\xf6\x94\xb6\x4a\x5f\x46\xa6\x00\x4b\xcd\x4e\xbe\xc6\x8d\xd9\x0c\x30\x81\xb1\x28\xfb\xbc\x4e\x17\xbc\xe2\xdc\x73\x8c\xf8\xf5\x68\x8b\xc5\xcb\x94\x87\x24\xda\xa2\x96\x77\x10\xa8\x1e\xe9\x4e\xbf\xda\xa9\x35\x92\x81\xb0\x44\xe8\x0d\x08\x43\xe6\xbd\x5a\x14\xa3\x9f\xb0\x56\x3b\xae\x30\xa3\x37\x8d\xeb\xca\xe9\x93\xd5\xad\x53\x2f\xf6\x5e\x76\xfe\xf7\x08\xd6\x33\xee\xe9\x3a\xd5\x0f\xdb\x92\x8c\x77\x82\xcf\x52\x21\x4a\x72\x56\x3b\x04\xda\x69\xe4\xc4\xaa\xcd\x88\xa8\x88\x23\x3b\x0a\x4a\x18\x69\xb5\x1d\x12\x0c\x2a\x3f\x72\x1a\x92\x92\x21\x54\x23\x7b\xd5\x95\x8c\x1e\xca\x4c\xe8\xa6\x7d\xd7\x57\x2b\xc9\x7d\x53\x99\x82\xec\xee\x88\xc1\xfb\xe1\xd8\x93\x70\x97\xf7\x99\xf9\xb0\x72\xdf\xfb\xe7\x68\xdd\x95\x16\x57\xc9\xca\x86\x17\xd2\xb0\xa9\xdd\x16\x9b\x36\xab\x0c\x10\x64\x6e\x85\x9e\xe8\x5b\xa4\x94\x08\xe8\x2b\x67\xf4\x13"
, 256);

const std::string q = std::string(
"\xef\x70\xcb\xc4\x6c\x48\x85\xa3\xe0\xbf\x01\x0a\xd5\x60\xaf\x25\xe1\x5d\x55\x0d\xbc\x8e\x3d\x02\x23\x65\x6a\x6c\x9e\xf1\x33\x97\xbe\xbb\xb9\xb6\xa1\xd5\x59\x80\xca\x3f\x4c\x0e\xc2\x0c\xd3\xe5\x30\x34\x53\xfa\xf0\x72\xbe\xeb\x5a\xc2\xd6\x14\x5b\x8e\x06\xd0\x24\xb0\xbe\x60\xac\xdc\x75\x29\xb5\x2c\x2e\xea\x72\x79\x8c\xa1\x63\x91\x65\x7c\xb3\xc8\x65\xff\x29\x6a\xe8\x16\xe1\x7b\xc3\xbc\x0e\x8f\x6e\x16\xb0\xfc\x46\x5b\xf4\x9d\x9f\xaf\xbe\x5f\x39\x10\xb1\xf6\xf3\x04\xe9\xd1\xa4\x1a\x65\x91\x44\x0a\x0e\xaa\x55\xe0\x3c\x90\x58\xd4\xa0\xbd\x1d\x3b\x29\xcb\x76\x69\x24\x1c\xc3\xaf\xca\xd5\x7f\x69\xc8\x3c\xb9\x6a\x6a\xfa\x3f\xab\x37\x3d\x6b\x5a\x7c\xce\x7e\x7d\x33\x0e\xcb\x88\x93\xae\xdf\x08\x4b\x2d\x3e\xe4\xa0\xbc\x32\x8f\x63\x7b\x3a\xb8\xbf\xbf\x89\x27\x8a\x1b\xb3\x4d\x06\x4f\xea\x8b\x9f\x92\x21\xf3\xa3\x98\x41\xe9\xbe\xa5\x66\xfb\xf9\x33\xe9\x3c\x74\xbf\xcd\x9c\x60\x9a\x06\xd6\x82\x8f\xa7\x57\x3d\xf2\x05\x1e\xf9\xd9\xfc\x41\xc8\x47\x85\xf6\x79\x1d\xab\x88\xb7\xbd\xf8\xb3\xf6\x6c\xfb\xeb\x62\x2a\x05\x8e\x6b\x3e\x8d\x4b"
, 256);

const std::string u = std::string(
"\x80\xbf\x3a\x21\x81\x6e\x4f\x7a\x93\xd1\x0b\xc3\xb7\x7e\xfe\x8e\xeb\x70\x58\x69\xa8\xc2\x06\x4f\xe0\xe1\x8f\x72\xb8\x46\xe6\x0f\x0a\x7b\x38\xde\x2b\xda\x9d\x58\xe2\xa2\x9c\xbc\x6b\x89\x91\xfc\xb7\xaf\x84\x83\x11\x5c\x16\x8a\xeb\x82\x7b\x93\x73\xd3\xf6\x3e\x8a\x5c\x47\xd2\xbe\xbb\xd4\x2b\xa1\xa7\xca\x3a\x16\x88\xde\xc5\x44\x78\x69\xdb\xc2\xab\xd8\x7f\x42\x8f\xfc\x97\xac\xed\x79\xbb\x46\xc8\x5d\x2e\x68\xbd\xdf\x08\xf8\x3f\xeb\xa7\x63\x8d\x83\xee\xf1\xda\xf3\xb4\x75\x51\xd6\x3d\x1c\x90\x5b\x26\xe3\x8d\xf9\x28\x4a\x5a\x94\x2d\x13\xb6\x9b\x0c\x8d\x35\x2b\x1b\x01\x2c\x86\xa4\xdd\x2e\x3c\x88\x8e\xbf\x88\x21\x06\xcd\xe4\x86\x2c\xb4\x5f\xee\xf8\x35\xf7\x15\x55\x61\x82\x02\xb6\x7c\x21\x42\x4c\x51\x68\x4a\x0f\x73\xda\x5d\x5c\x10\x62\x4e\x65\x51\x9f\xfc\x84\x47\xfa\x9d\xd6\xf5\xf8\x11\x19\xf6\xbd\xb6\x56\xf6\xca\x54\x54\xa5\x1a\x02\x3a\x86\x9e\xb7\xc8\x63\x1e\x3b\x59\x70\x44\x62\xbb\x3d\x44\x21\x83\x31\x5a\x6c\x71\x7e\x83\x85\xe4\xdf\x1b\x73\x3e\x92\x3e\xc7\x3e\x3f\x64\x2f\xcc\xf5\x26\xa1\xb7\x60\x9f\x1b\xa6\xc3\x44\x40"
, 256);

const std::string n2 = std::string(
"\xba\xa7\xce\x31\x29\x17\x21\xdf\xe0\xbd\xf4\x98\x41\x45\x55\x0a\x5d\x11\x05\x69\xab\x5f\x06\xc8\x3a\xfa\x47\xa3\x1f\x9e\xc2\xb2\x84\x2d\xed\xf0\x3d\x5f\xed\xa3\xbb\xda\x1c\x7a\x69\x60\x05\x0f\x31\x73\x71\xb9\x60\x6e\xde\x16\x6b\x76\x85\xb1\x92\xac\xec\x29\xda\xad\x82\x7d\x06\x02\xe8\x8e\xe7\xec\x92\xb9\x6e\x16\x85\x0a\x52\x03\x2b\x68\xe2\x52\x89\xcb\x8e\xd1\xf8\xe5\xef\xb3\x26\x67\xeb\xec\x4d\x1b\x2f\x83\x0b\xa9\xde\xba\xea\x6c\x8e\xa0\x89\x3a\xb6\x1d\x7a\x5a\xda\x3a\xca\xa8\x1d\xca\x9b\xf8\xc6\x19\x87\xe8\x30\xfa\x1d\x7d\xeb\xa5\x5a\x91\x95\x83\xda\x25\x0e\x55\xa1\x18\x4d\x0d\xe5\xf1\x70\xbe\x3c\x2e\x58\xea\xae\xe5\x2f\x92\xe0\x08\xf7\x0c\xbd\x4c\xc0\x4a\x22\x40\x7a\xc5\x9b\xaa\x0b\x20\xb1\x76\x64\xfe\xd1\xe6\xec\xfe\x82\xa2\xe2\xfa\x9c\xe2\xb9\x97\x99\x5f\x48\xb5\xc2\xa2\xea\x28\xaf\xca\x82\x43\x56\x68\x4a\x62\x91\xed\x06\x93\x09\xbe\x7c\x4c\x5a\xbb\xdc\x84\x92\x8c\xd8\x2f\x14\x21\xd0\x13\x1d\xf8\x1d\x90\x85\x74\x15\xd2\x18\xc6\x57\x9a\x1f\xc6\x8e\x32\x2d\x18\x32\xd4\xa2\x03\xca\x76\x85\x92\xda\x62\x44\xd6\x34\xfa\xf9\xac\xf1\xb0\x5d\xfb\x0b\x4a\x76\x4f\x3a\x35\x6f\xc1\xf2\xd6\x73\x93\xbe\xae\x83\x05\x3d\xaa\xc8\x57\xc3\x4c\xe5\x5c\x7a\x5e\x73\xf1\xd7\x3c\x0c\x00\xe9\xd7\xbe\x07\x9b\x94\x46\xc0\x73\xe0\xb2\xb0\xf5\x88\x32\x8d\x46\xba\x47\x4c\x49\x44\x5a\x46\xa6\x96\xa5\xb6\x74\x9c\x8a\xb5\x7f\x10\x09\x04\xdc\xc5\x91\x71\x16\x31\x00\xd8\xce\x53\x92\x51\x5e\xe4\x87\x32\x13\xbb\x4e\xac\xfd\xdd\x45\x5d\x4c\x86\x57\xaf\xc5\xf0\x12\xf1\x81\x47\x0a\x9f\xe3\x5a\xd8\x7b\x12\xa9\x73\x81\x16\x2a\x53\x67\xd0\xdc\xf9\x16\xa7\xbe\x33\x4f\x31\x09\x28\x5f\x30\x43\xc0\x72\x20\xc8\x6f\xc2\xe6\xd7\x34\x21\x61\xf9\x1a\x45\x88\xed\x72\xf0\xa2\xe2\xbc\xb0\x9d\x55\x9e\x70\x69\xd2\xf9\x19\x55\x93\xa9\xc4\x23\x0d\x3f\x05\xd7\x18\xcb\xde\x8b\x5e\x22\x8b\x09\x7b\x2d\x99\xcf\xdd\x87\xa6\x74\x9a\xe6\xa0\x65\x59\x44\x70\x1f\x46\x35\xb5\x25\xef\xf9\x32\x98\xf5\xd2\xd5\x52\xfc\xb9\x0c\xb7\x8f\x84\x27\x54\x62\xfd\x32\x88\xe2\x09\xed\x05\xcc\xee\x45\x02\xc3\xda\xc4\x38\xd5\x91\x79\x7a\x6c\xa3\x7b\x3e\x7a\xaa\xd8\xb3\x21\xef\x83\xa1\x4b\x74\x51"
, 512);

const std::string e2 = std::string("\x01\x00\x01", 3);

const std::string d2 = std::string(
"\x0f\x76\x59\x31\x5f\x5b\x08\x36\x58\x92\xc3\xd1\x5d\x0e\xd6\x45\x9e\x82\x0b\x75\xbe\x79\x87\xc1\x4c\x89\x71\x27\xc5\x35\xcc\xa1\x27\x2b\xfa\xda\xfc\xea\x96\x70\x0a\xde\xbd\x9f\x32\x5d\x7e\xed\xcc\x45\xe8\xf4\xd7\x55\x37\xd6\x99\x9e\x5e\xe2\xdf\xe8\xad\x43\xa6\x56\xdb\x49\x6a\x17\x11\x96\xcd\x05\x9e\xfd\xf7\x6d\xac\x25\xb7\xb7\x85\x80\x11\xc7\x8e\x9c\xab\x3f\x1f\xa4\x44\xa0\x0d\x9d\x6c\x40\xcd\xfe\x63\x88\x32\x8e\x26\xe2\x4b\x0b\x25\x21\x8d\x5c\xac\xbb\x72\x68\x56\x4d\xaa\x7e\x14\xc1\xb4\xfb\xfd\xc5\x1d\xaa\x11\x6c\x96\xc6\xd8\x9f\x81\x0a\x30\x5d\x94\xd3\x9f\x05\x5e\xeb\xf9\x6e\x1e\x4f\x4a\xec\xa7\x65\x9b\x7e\x0d\x70\xf4\xe8\xf0\xe0\x2d\x3f\x03\xeb\x78\xbe\x6b\x69\xf6\x01\xaa\xac\x82\x71\x79\xe1\xf9\xe9\xd6\x0f\x90\x30\x61\x38\x07\x1f\x85\xa1\x8e\x88\x4d\x6f\x44\x41\xb2\x56\xf6\x98\xda\x3f\x27\x5d\x56\xaa\x1b\x07\x61\x59\x46\x43\x25\xfa\x7e\xa7\x80\x98\xb1\x62\xd6\x15\x0e\xcf\x8f\x96\x61\x7b\x43\xef\x4a\xdb\xaf\x02\x77\xd0\x48\xb7\x1d\x88\xa9\xfb\x33\xca\x5a\x4b\xf7\xe1\xff\x6d\xda\xf6\xc8\x87\xea\xc9\x5b\x34\x53\x00\x92\xac\x43\xb2\xc9\x5c\xbd\x5e\x67\xd5\xbd\xec\xbd\x03\x97\xf3\x5b\x71\xf9\x36\xd4\xba\x9a\x73\x42\x5e\x77\x25\x1f\x90\x19\x31\x63\x06\x9f\x74\xc3\xbf\x1e\x09\xaf\x28\x3c\xe1\x02\x22\xc6\x03\x58\x12\xb8\xf8\x7c\x40\xe2\xc3\x68\xcd\xb9\xd1\xfb\x3a\x8b\x4c\x2b\x8b\x18\xe9\xc6\x3d\x9f\xda\xba\x08\xf3\x44\xdd\x27\x30\x11\xe0\x6c\x82\x3e\xbd\x7b\x15\x0e\xf7\x52\x45\x45\x81\xb9\x09\x96\x26\x64\xc6\xeb\x72\x09\x7e\xf7\x16\x85\x94\x7d\xa8\x71\x25\x5a\xd6\x24\xe0\x7c\xdd\xc6\x5e\x7d\xee\x06\x37\xdd\xc1\x9a\x32\x83\x5c\x21\xf8\x11\x42\xdc\x9a\x9d\x67\xcb\x8b\x55\x45\x78\x81\x22\x54\x85\xe2\x48\xdb\x74\x5a\x94\xf9\xaa\x37\x09\x6e\xff\x1d\xcd\xfc\x35\x0d\xbd\x01\x72\x6f\x8b\xa9\x37\x3a\xd7\x5a\x53\xf7\xeb\xfc\xdb\xe6\x7f\x67\xe3\x07\x93\x49\xac\xc4\x5c\xcb\xbf\xcb\x43\x10\x4c\xd1\x85\xb6\x8f\x0b\x14\xd8\x6a\x7f\x8e\xa3\x65\x02\x8c\xb5\x1a\xba\x31\x1b\x22\x05\x0f\x58\xc8\x04\xa4\x1e\xb2\x6c\x54\x06\xf5\x93\x46\x6c\x37\x08\xbc\x80\x29\xd4\xf9\xe5\x06\xba\xd1\x86\x87\x48\x90\x21\x43\xfa\x85\x24\x27\x54\x2e\x71\xf5"
, 512);

const std::string p2 = std::string(
"\xc1\x7a\x24\xc7\xf2\x78\x12\x5c\xf5\xf6\xdb\xd5\xad\xd0\xdc\x78\x43\xa8\xa5\xac\x4f\x8c\x37\xe9\xd2\xf3\x20\xc9\xe2\x03\x2f\x01\x00\xdc\xf4\xd4\xb7\xe9\x3c\x90\x94\xbd\x48\x1a\x2d\xa7\x37\x81\x1c\x6c\xec\x13\x31\x5e\x82\xa0\xa1\x7a\x9c\x53\x79\x55\xba\xa2\x4c\x6f\x95\x3c\x30\x65\x91\x7d\xea\x65\x0b\x82\xc0\xea\x63\x91\x9d\x78\xed\x5c\xd7\x21\xc1\x7c\x45\xcf\x98\xd1\x07\x22\xd9\xd0\xb3\xa2\xff\x51\xda\xfb\x6a\x24\x4c\x16\x89\xe5\x34\x22\xae\x42\x16\xc6\x7c\x10\x84\x38\xdf\x8e\x24\xc0\xaf\xd2\xb1\x5b\x47\x2b\x92\xdf\xd4\xa3\x56\x38\xaf\x9d\xe2\xac\x41\xf3\x6f\x79\xa5\x3e\x23\x3d\x29\xa0\x7a\xa3\x14\x59\xf9\x6d\x45\xbd\x05\x0a\xe3\x59\x02\x41\x6b\x50\xa3\x85\xff\x3b\x86\x15\x56\xda\x15\x14\xff\x11\x77\x12\xb4\x0b\xd7\xe1\x27\x63\x2e\x85\xd0\x16\xb0\xe3\xac\xf2\x1a\x17\xeb\xb7\x82\x8a\x8b\x9c\xe3\x0a\x24\xc5\x35\xee\xb1\xc4\xb7\xa5\x89\x9d\xde\xac\x15\x70\x9e\x22\x7c\x3f\x55\x75\x02\x91\x34\xbe\xde\x87\x25\x29\x35\xa0\x85\xa4\xda\x4a\xfd\x75\x9f\xb9\xb6\x76\x53\xd6\x5f\xe3\xa0\x2d\x58\x9b\x3d\x5e\x26\x0a\x01\x6f"
, 256);

const std::string q2 = std::string(
"\xf6\xf9\x53\x6a\xb5\x6b\xd4\xff\xfc\xf0\xe6\x6e\xe7\x24\x5a\xaf\xea\x8c\x60\x7d\xa2\xdf\x0d\xe1\x68\xa6\x2b\x38\xbe\x15\x4a\x69\x35\x40\x39\x8f\x97\x07\x97\x00\x35\xc1\x54\x7f\xb3\x2f\x13\x1f\xd5\xea\x08\xd1\x4d\xbf\xb8\xa1\x62\xfb\xb1\x24\x8a\xb9\x3e\x26\x48\xc4\x24\x75\x57\x45\x65\x3a\x7f\xf3\x60\x8c\x17\x56\x8f\xcf\x49\x83\xc2\x44\x3e\xb7\x3a\x53\x1d\x9b\x35\x55\xc0\x5b\x94\xa9\xf6\x3c\xba\x00\x10\x89\x3b\x7e\x51\xe1\xf3\xf6\x53\xaf\x6b\xef\xc0\x39\xd9\x3f\x31\x22\x3e\x11\xf5\x37\xd1\xe1\x84\x9b\x3a\xff\x66\x47\x11\x9b\x1b\x07\x08\x4c\x7a\xcf\xeb\x17\xe3\xf5\xc5\xf4\x89\xc0\x58\xac\xd0\x32\x0e\x8a\x17\x56\x1a\x78\xf2\x80\x60\x5d\xa6\xa0\x7b\x99\x26\xea\xb2\xb0\xa3\x1d\xe7\xa4\xc8\x4b\xa8\x56\xba\x17\x20\x44\xd8\x34\xf5\x61\xe1\x5b\x40\xef\x26\x42\x22\xea\xb8\xc7\x90\x1c\x6f\x10\xec\x30\x01\x27\xdc\x58\x1a\x33\x98\x44\x9f\x73\xdb\x47\x9d\x40\xaf\x88\xa9\xa7\x3a\x03\x8f\xa3\xa5\xea\x6a\x9b\xd2\xd0\x63\x41\xb6\x37\x54\x42\xa7\xb6\xb6\xe2\x6b\x78\xc2\x34\x95\xdd\x97\x76\x47\x11\x98\x0e\x83\xe9\xc4\xbb\x86\x3f"
, 256);

const std::string u2 = std::string(
"\x4c\x49\x7a\x9a\x04\xd8\xcb\xab\xe7\xc6\xce\xd2\x9b\x1a\x5b\x5c\xe7\x85\x32\xd4\x7b\x41\x4f\xc0\x1a\xb0\xc0\x4e\xe2\x91\xcc\x84\xa1\x72\x30\x28\x57\xec\x6b\x93\x9a\xcc\xb5\xdc\x00\x70\x1c\x25\xf4\x96\xcf\x96\x30\x1c\xa9\x8d\xb7\xed\x52\x7b\x80\xef\x6d\xbc\x77\x1f\x28\x2a\x66\x21\xd7\xc8\xd8\xa8\xc7\xaa\x89\xef\x8d\x76\xcb\x45\x04\x20\x9e\x8f\x1a\x60\x49\x23\xe9\x2e\x8d\x2a\x53\xe9\x59\x6f\xc3\xee\xdf\x76\xcb\x17\xd1\x85\xcb\xb0\x6c\x99\x9b\x09\x2d\x78\x02\x75\x1c\xcc\xd9\xc7\x08\x7f\x52\xca\xa3\x45\x70\xfe\x9a\xc5\x1c\x52\xfa\x3a\xd5\xd8\x7e\xdd\xe6\xc7\x93\xde\x31\x6c\x87\xb8\xa6\xdb\xd3\xb3\xaa\x85\xa6\x3a\xb6\xb9\x56\x51\x90\xeb\x22\xa4\x9e\x27\x6b\x86\x38\x83\x34\x14\x51\x7b\xa9\xa0\xac\xa2\x42\xa7\x94\x0f\xbb\xa6\x25\x78\x71\x27\xa2\x62\x71\x4b\x62\xf2\x4e\x8f\x0d\x88\x3f\x0d\x14\x44\x6e\x4d\xcc\xff\x98\x9c\x9d\x7d\x32\x2b\x62\xa7\x54\x4d\xa0\xb6\x63\x5e\xcf\x31\xf8\x81\x8f\x77\xec\xf3\x9b\x75\x8d\x61\xec\x6d\xbb\xd0\x3a\x04\xbd\xc1\x37\x52\x12\xbd\x08\x71\x74\xf6\x09\x92\xce\xec\xbf\x26\xd0\x32\x3d\xad"
, 256);

const time_t timestamp = 0x54b60ec6;

const std::string hashResult = std::string(

"\x99\x02\x0D\x04\x54\xB6\x0E\xC6\x01\x10\x00\xC0\xF3\x1D\xB7\xEE\x2A\xA4\x87\xAC\x4E\xE2\x1D\x19\x7E\x82\xCD\xFD\x42\x73\xBF\x54\x6E\x36\xC6\x11\xC1\x2C\xF4\x4F\xAF\xB7\x53\x6B\x7C\xAD\x22\x5F\x74\xF1\x3D\x88\xAF\xCA\xC3\xA0\x6A\x17\x1D\xA7\x21\x74\x62\xD9\xD7\x19\xD8\x7A\x98\x15\x0C\x38\x30\xD2\x2B\x43\xAE\x2D\x8D\x97\x80\x77\x19\x18\xCE\x66\x69\x48\x44\x66\x5A\x56\x76\x23\x84\xBE\x86\xFD\xEE\xC2\x8B\x5F\xF9\xBA\x1C\xC1\x31\x6E\xAF\x41\x88\x7A\x74\x7B\x1B\xC3\x93\x04\x27\x47\x29\x4E\x88\x82\x78\x08\xB4\xA1\xB9\x26\x40\xD5\x0B\x8E\x49\x2B\xEA\x86\x52\xA3\x27\xA6\xCA\x99\x14\x5A\x3B\x5E\xFD\x66\xCB\x4A\x6E\xF5\xA0\xEC\x88\xB3\x2B\x4D\x90\xBD\x0A\xBE\x10\xF2\x94\xA6\xDB\x4E\x8B\x13\x29\xEB\xDB\x49\x71\xD6\x74\xCF\x37\x5B\x85\x71\x6A\x33\xC7\x16\x54\x6F\xC7\x50\xEF\x55\x6B\x7E\x27\xE2\x6A\x56\x95\xB6\x62\x8D\x17\xBB\xFF\x13\x58\x74\x8B\xD2\x7A\x7C\x23\x20\x17\xC9\xB6\xB0\x15\x5C\xFF\x78\x1F\x1D\x94\x57\x70\x0E\x4A\xB9\x20\xBC\xEC\x90\x2F\x15\x2F\x10\x42\x4C\xE9\xA5\xBB\x5E\xCE\xD3\x62\xB6\xB8\xC9\x9E\x98\x66\xAF\x11\x06\xFC\x0F\x25\x44\x81\x9D\xE9\x2E\xE6\x8E\xE8\xC8\x6B\xF5\x0E\x35\x25\x79\xBA\x69\x33\x68\x5B\x7C\x9B\x91\x7F\x68\xED\x5E\x30\x25\x87\xC8\xC6\xCE\xB0\x4D\x99\xD6\x4F\x3D\xCB\x5D\x08\xF4\x4F\x3D\x08\xDC\xFA\x65\xCA\x24\x49\x4F\xF8\x9A\x44\x09\xF1\xBC\xF1\x2E\xF7\xFC\x95\x1C\x71\xB0\x9F\xFC\x99\xFE\xC2\xCE\x3F\x64\xF8\xF9\xF7\xB9\x2F\x3C\xC1\x82\x82\x95\xCF\x5D\x14\x7C\xC5\xA7\xD1\x78\x7F\xDA\xB9\x73\xA7\x0C\x0C\x37\x3B\xCA\xC3\x44\xDB\xF1\xF0\xD4\xAA\x62\x6B\x19\xD5\x1B\x68\xB3\x9D\xFF\x1F\xDA\x45\x2E\xE1\xC8\x8C\x24\xFA\x62\x04\xD0\x9B\x06\x2D\x1B\x69\x94\x89\xD0\x2C\x1E\x27\x93\xCE\x41\xAE\x30\x56\x8F\x7A\x97\xCA\x3D\x84\xF9\xF2\x92\xF2\x5D\x37\xFC\x5B\x65\x26\xB0\xCC\x19\xA5\x99\x15\xA4\xFF\x86\x0F\x5F\xEF\x53\xBD\x39\x67\x2E\x6F\xFE\x4A\x2D\x79\x1E\x01\xE8\xF7\x0E\xEA\xB7\x7F\xFC\x08\x94\xC3\xE3\x6F\xC3\x83\x3E\x45\x3C\x75\x35\x9D\x84\x0C\x87\x6A\x75\xD1\xDF\xD7\x71\xDB\xD9\x97\xB4\xD6\x4B\x83\xB6\xA6\x77\xC5\xEF\x9B\xE6\x60\xB1\x68\x26\xB3\x94\x46\x0E\x96\x48\x9A\x58\xE0\x4E\xD7\x6A\xE5\x81\xAF\xC3\x42\x5A\xA1\x5F\x31\x33\xA8\x06\x7C\xF8\x91\x00\x11\x01\x00\x01\x99\x02\x0D\x04\x54\xB6\x0E\xC6\x01\x10\x00\xBA\xA7\xCE\x31\x29\x17\x21\xDF\xE0\xBD\xF4\x98\x41\x45\x55\x0A\x5D\x11\x05\x69\xAB\x5F\x06\xC8\x3A\xFA\x47\xA3\x1F\x9E\xC2\xB2\x84\x2D\xED\xF0\x3D\x5F\xED\xA3\xBB\xDA\x1C\x7A\x69\x60\x05\x0F\x31\x73\x71\xB9\x60\x6E\xDE\x16\x6B\x76\x85\xB1\x92\xAC\xEC\x29\xDA\xAD\x82\x7D\x06\x02\xE8\x8E\xE7\xEC\x92\xB9\x6E\x16\x85\x0A\x52\x03\x2B\x68\xE2\x52\x89\xCB\x8E\xD1\xF8\xE5\xEF\xB3\x26\x67\xEB\xEC\x4D\x1B\x2F\x83\x0B\xA9\xDE\xBA\xEA\x6C\x8E\xA0\x89\x3A\xB6\x1D\x7A\x5A\xDA\x3A\xCA\xA8\x1D\xCA\x9B\xF8\xC6\x19\x87\xE8\x30\xFA\x1D\x7D\xEB\xA5\x5A\x91\x95\x83\xDA\x25\x0E\x55\xA1\x18\x4D\x0D\xE5\xF1\x70\xBE\x3C\x2E\x58\xEA\xAE\xE5\x2F\x92\xE0\x08\xF7\x0C\xBD\x4C\xC0\x4A\x22\x40\x7A\xC5\x9B\xAA\x0B\x20\xB1\x76\x64\xFE\xD1\xE6\xEC\xFE\x82\xA2\xE2\xFA\x9C\xE2\xB9\x97\x99\x5F\x48\xB5\xC2\xA2\xEA\x28\xAF\xCA\x82\x43\x56\x68\x4A\x62\x91\xED\x06\x93\x09\xBE\x7C\x4C\x5A\xBB\xDC\x84\x92\x8C\xD8\x2F\x14\x21\xD0\x13\x1D\xF8\x1D\x90\x85\x74\x15\xD2\x18\xC6\x57\x9A\x1F\xC6\x8E\x32\x2D\x18\x32\xD4\xA2\x03\xCA\x76\x85\x92\xDA\x62\x44\xD6\x34\xFA\xF9\xAC\xF1\xB0\x5D\xFB\x0B\x4A\x76\x4F\x3A\x35\x6F\xC1\xF2\xD6\x73\x93\xBE\xAE\x83\x05\x3D\xAA\xC8\x57\xC3\x4C\xE5\x5C\x7A\x5E\x73\xF1\xD7\x3C\x0C\x00\xE9\xD7\xBE\x07\x9B\x94\x46\xC0\x73\xE0\xB2\xB0\xF5\x88\x32\x8D\x46\xBA\x47\x4C\x49\x44\x5A\x46\xA6\x96\xA5\xB6\x74\x9C\x8A\xB5\x7F\x10\x09\x04\xDC\xC5\x91\x71\x16\x31\x00\xD8\xCE\x53\x92\x51\x5E\xE4\x87\x32\x13\xBB\x4E\xAC\xFD\xDD\x45\x5D\x4C\x86\x57\xAF\xC5\xF0\x12\xF1\x81\x47\x0A\x9F\xE3\x5A\xD8\x7B\x12\xA9\x73\x81\x16\x2A\x53\x67\xD0\xDC\xF9\x16\xA7\xBE\x33\x4F\x31\x09\x28\x5F\x30\x43\xC0\x72\x20\xC8\x6F\xC2\xE6\xD7\x34\x21\x61\xF9\x1A\x45\x88\xED\x72\xF0\xA2\xE2\xBC\xB0\x9D\x55\x9E\x70\x69\xD2\xF9\x19\x55\x93\xA9\xC4\x23\x0D\x3F\x05\xD7\x18\xCB\xDE\x8B\x5E\x22\x8B\x09\x7B\x2D\x99\xCF\xDD\x87\xA6\x74\x9A\xE6\xA0\x65\x59\x44\x70\x1F\x46\x35\xB5\x25\xEF\xF9\x32\x98\xF5\xD2\xD5\x52\xFC\xB9\x0C\xB7\x8F\x84\x27\x54\x62\xFD\x32\x88\xE2\x09\xED\x05\xCC\xEE\x45\x02\xC3\xDA\xC4\x38\xD5\x91\x79\x7A\x6C\xA3\x7B\x3E\x7A\xAA\xD8\xB3\x21\xEF\x83\xA1\x4B\x74\x51\x00\x11\x01\x00\x01\x04\x18\x01\x02\x00\x09\x05\x02\x54\xB6\x0E\xC6\x02\x1B\x0C\x04\xFF\x00\x00\x00\x0F"
, 1077);

const std::string encryptedMessage = std::string(
"\x85\x02\x0c\x03\xe0\xab\xd1\x63\xe2\x8b\x34\x9e\x01\x0f\xfe\x31\x9e\xcd\xec\xe5\xb5\xbb\x25\x51\x1a\x93\x86\xe3\xb9\x1b\xd9\xef\xb6\x0d\x5f\x4a\x15\x90\xd1\xe8\xc4\xf4\x8d\x3e\x02\x1a\x66\xab\xc7\xd9\x15\xd3\xf2\xc5\x9e\xc6\x59\x28\x98\xcc\xcc\xe4\xb7\xcf\x73\x12\x87\xbe\x63\x2e\x9c\xb6\xef\x6d\xa7\x86\x18\xee\x21\x1d\x73\x88\x67\x72\x52\x03\xea\x3d\x4a\x77\x75\xb7\x8e\x23\x70\x88\xaf\x79\x59\xe3\x30\xa1\x66\x80\xf9\x2f\x18\x61\x96\x1e\x45\xdf\x17\x21\x3b\xeb\xd8\x2f\x67\xbf\x1f\xef\xe2\xbd\x05\x9b\x84\x3e\x79\x98\xc4\x8c\x2a\xde\x30\xbc\xda\x80\x11\xcc\x7b\xc5\x9d\x6b\xc0\x35\xc2\xb4\xe1\xda\x18\x87\xec\x3b\x73\xb8\xaa\x3c\x9d\xcf\x07\x06\xe0\xde\xe9\xd0\x6e\x5d\xd2\xd8\x1e\xb0\xc6\x5b\x77\x25\x94\x03\x7e\xd7\x8e\x41\xdb\x2e\xe4\xe2\x59\x8f\x78\x2c\x2c\x5a\x2f\x53\x90\x04\x0a\xe0\xdb\xaa\xa3\x73\x66\xd9\x28\xe6\x30\x60\x14\xef\x7d\x4b\x3a\x89\xd8\x1d\x56\x14\x1f\xbd\x3a\x44\x41\xa0\x49\x72\xb1\x51\x6f\xa7\x33\x4f\x79\x10\x44\xcd\x78\x34\xb0\xf9\x86\x0e\x2b\x8d\xde\x07\x6c\xb9\xbf\x4b\xbe\x73\xc0\x0a\xee\xec\xc6\xfb\xd6\x6a\xd0\xc4\xab\xe9\xfc\x54\xbf\xe6\x7d\x88\x0a\x80\x21\x1f\xdc\x34\xb9\xdc\xe8\x37\x46\x6d\x9a\xe1\x6b\x80\xb9\x59\x56\xcd\x5b\x20\xa8\xb9\xba\x86\x63\x46\x11\xd7\x22\x62\x6f\x9b\x99\x41\xde\xdb\x7b\x5a\x39\x5c\x42\x0e\xc5\xef\xb4\x48\xf3\xe5\xef\x21\x3f\x1f\x5f\x73\x90\x26\x28\x4f\x95\x99\xed\xbe\x9b\x91\x73\x8b\x4d\xc7\xdf\xfa\x9b\xc0\x2a\x08\x93\x5c\xfc\xe5\x09\xb1\xb4\xb2\x16\x57\x56\xf8\xae\xf2\x76\x22\xfc\xba\x06\xf9\x5c\x98\x02\xfc\x21\xdf\xb5\xd8\xa4\xf6\x15\x1b\x4f\x91\x87\x61\x04\x64\x0b\xdb\x8c\xa8\xe7\x6c\x46\xc0\x71\x9d\x99\x0d\xb8\x6b\xf1\x12\xc4\x79\x63\x1e\x5a\x2b\xd6\xc3\xb9\xa7\xdd\xd3\x93\x7e\xbd\xae\x08\x72\x4d\x91\xb5\xdf\x99\xfa\x88\x62\x77\xae\x2b\x3d\xa7\x7d\x81\xcc\x69\x67\x7b\x4e\x24\x27\x1f\xc7\xf0\xa5\x4b\x47\xa5\xa7\xeb\x23\xc9\xf8\x62\x67\x1d\x9c\xb3\x9d\xe9\x5e\x45\xea\xe8\x3b\x26\xbe\x7a\x4a\x5a\xa9\xa5\xdf\xa6\x4e\x31\xdc\x24\xa3\x73\x86\xc4\x9e\x6f\xd9\xc3\xd3\x84\xc9\xb0\x9f\xdc\xf7\xdd\x18\x14\x0a\xfe\xa6\x97\xa4\x07\xed\xcc\xc1\x5d\xf7\x03\xb8\x0b\x45\x9c\x4c\xfe\xaf\x44\x89\x7e\x84\x47\x69\xa8\x29\x1b\xf5\xff\x03\x26\xd2\x45\x01\x85\xf2\x57\x2a\x5f\x53\x2b\x0d\xb4\x65\x97\x64\x23\x0e\xd7\x5a\xc0\x9a\x4c\x30\x41\x98\xbe\xe6\xf8\x45\xbe\x92\x31\x1c\x10\x3a\x84\xc0\xf3\xe7\x04\x01\xde\x0d\x40\x2e\x6a\x6c\xb5\xb1\x28\xd5\x08\xef\xf8\x51\xbb\x1a\xc7\x48\x4d\xcd\x11\x3e\xea\xe8\xaa\x56\x78\x63\x89\xc6"
, 598);

const std::string encrRSA = std::string(
"\xa3\xfa\xcd\x3a\x30\x81\x0f\x6e\xbb\x6a\xb3\x3c\x2e\xfd\x77\x67\x4f\x17\xe9\x90\x6b\x3d\xc4\x0a\xca\xe4\x38\xea\xcc\x4b\xca\xc0\x0c\x5e\x3f\x82\x6b\x9f\x7e\x10\x1a\x5e\xc9\xab\x28\x7d\x01\x59\x79\x5f\x64\x9b\x29\xc6\x07\xb5\xee\xad\x72\x2c\x2d\xe4\xa0\x6b\x89\x0a\xd4\xb5\x69\x55\xaa\x1c\x92\x71\xb6\xfe\x73\x89\x11\xba\xe1\x87\xb1\xf6\x3a\xbc\xbe\x5e\xd8\x15\x05\xac\xef\x6a\x87\x1f\x07\x8c\xb9\x0b\x51\x65\x51\xd8\x77\xfb\x86\x23\x97\x35\xbc\xf0\xc9\x08\x95\xee\xe3\x57\xc7\x94\x48\x62\x6e\x8d\xe6\x91\xda\x1a\x04\x3a\x0a\xa2\x85\x8c\x3f\x9f\x73\x75\xf5\x22\xb7\xf1\x67\xc1\x1d\x67\x3b\x86\x00\x83\x8e\x1a\x33\xbd\x06\x17\x8c\xd9\xd1\xad\x6d\x0e\x94\x5a\xe9\xae\x9a\x4e\xb6\x11\x0b\x9b\x8f\x5f\xbc\x5b\x3e\xa1\xec\x6b\x59\x7b\x4a\xb8\xb0\x78\xc2\x14\x30\x39\x0e\x57\x87\xd7\xaa\x92\x02\x11\xef\xff\x52\x4b\x43\xb7\xa2\xec\xa5\x91\x8b\x5c\x2c\xa1\x3e\x05\x4e\x31\xe0\x2b\xe0\x5b\x1f\xae\x10\x5f\xf4\x3e\xb8\x55\x5f\xde\x34\x57\xd1\x6d\x1b\xf0\x07\xc0\xe4\xcf\xdd\x47\x3c\x95\x00\x2e\xe6\x9f\x65\x63\x33\x1e\xdf\x04\x5c\x16\x2a\xbc\x45\x17\x99\xba\x66\x26\xcc\xc2\x2d\x51\x78\x90\xb9\xfb\x8a\x79\xa6\xe6\x30\x17\xe9\xd0\x46\x39\xa8\xfa\xc7\x31\x47\xee\xbf\x51\x81\xa6\x21\x88\x84\xcf\x49\x6a\xcc\x82\x40\x4b\xc8\xf5\x7f\xe0\x7b\x22\x27\xb0\x9a\x51\xd9\x0d\xc9\x4a\xa3\xad\x6e\xfa\x45\xed\x80\x13\x99\x67\xcd\x7e\x0f\x43\x99\xaa\x64\x5f\x04\xcb\xeb\x5a\xda\xe1\xce\x20\xaa\xc0\xcf\x30\x9c\x32\xb8\xea\x83\x96\xb0\x8e\x47\x7a\x87\xbb\xa6\xb8\x87\x93\x7f\x91\x56\x2a\x35\x39\x3e\x42\xeb\x9d\x6a\x6a\x09\xb0\xb2\xce\xdb\xac\x78\x6e\x53\x28\xd7\x7a\x27\x0d\x36\x9e\x20\xc7\x1f\xc1\xc0\xb0\x0a\x1a\x04\x5d\xde\x5d\x4a\x91\xeb\x62\x74\xa6\x51\xbe\x30\x1a\x96\xf3\x85\x2e\xd3\xfa\xde\x78\x8c\xde\xea\x1e\xea\xdd\x50\xe3\x1c\xed\xbe\x1d\x8e\xaf\x05\x41\xb6\xbd\x9d\x31\x01\x86\x60\xf1\xfd\x6c\xe0\xfc\xfe\x05\x26\x42\xeb\xdb\xef\x72\xd2\x70\xa1\xf9\x75\x87\xae\xe4\x89\xb1\xbc\x45\x01\xb4\x27\xf7\x3c\x8c\x0a\xa8\x8f\x26\x4c\xa1\xb8\x8c\x06\xa2\x2d\x16\x41\xa9\xd6\xc4\x6e\x78\x33\x1e\xc6\x00\x20\x0f\xcf\x34\x23\x1d\x90\xd0\xa1\xf7\x6d\xca\xe5\x40\xa3\x11"
, 512);
// aes key
const std::string keyAES = std::string(
"\xC0\x67\xD2\x1C\xDD\x0E\xFA\x94\x83\x26\xC9\x9F\xD7\xE1\xFA\x19\x50\x90\xC2\x42\x57\xC1\xFE\x3A\x41\xFB\xB4\xF8\x7F\xFC\x6B\x99"
, 32);

const std::string encrAES = std::string(
"\x06\x66\xd0\xda\x7d\x1d\x4b\xd4\x03\xf2\x8a\x28\x24\x2a\x2b\x44\xcf\xe2\xa2\xfc\x7d\xd9\xb2\xa9\xdd\xd7\x47\xc3\xfb\xc2\xce\x40\x76\x34\x3b\xa7\x88\xb3\xbe\xf9\x26\x6d\xbc\x12\xdd\x3b\xcd\x1e\x8f\x06\xa6\x00\x1a\x67\x9d\x98\x59\x41\xbd\xce\x45\x55\x5c\xec\x06\x40\x81\xe0\x61\x48\x2d\x5c\x12\xf6\x0f\x6b\x77\x86\x94\xf3\x57\x9e\x0a\xd2\xd3\xf4\xde\x47\x04\x89\x6e\xe2\xa3\xa6\xd9\x83\x15"
, 97);
const std::string prefixAES = std::string(
"\x55\x00\x90\x70\x3C\xFE\xE6\xA2\xAB\xAD\xC1\x4A\x67\x14\xB9\x79\xB9\x79"
, 18);
// gpg: DBG: encr-data thekey C0 67 D2 1C DD 0E FA 94 83 26 C9 9F D7 E1 FA 19 50 90 C2 42 57 C1 FE 3A 41 FB B4 F8 7F FC 6B 99

const std::string privateEncryptedKey = std::string(
"\x95\x03\xbe\x04\x55\x3f\x9b\x4e\x01\x08\x00\xc3\xb7\x5d\x92\xa9\xf8\xf4\xa1\x95\x33\x34\x30\x14\x6b\x24\x66\x44\xf9\xcb\x5b\x0b\x78\x95\x39\x06\x88\x18\xb2\xe6\x2f\x6e\xad\xfb\xe0\x16\x45\x73\xc8\x23\x3e\xb4\x45\xdf\xac\x10\xf9\x30\xe1\x14\x47\x83\x89\x4d\xba\xf3\xa7\xf1\x3f\x40\xfd\x1d\x2b\x65\xf7\x31\x37\xcc\xa5\xc9\x58\xf9\x7e\xff\x12\x10\x92\x37\x90\xbc\x7d\x49\x93\xc9\x41\x0f\x0b\xa1\x96\xfa\x24\x4f\x79\xce\xb3\xee\x70\xfb\x59\x24\xde\x60\xb6\xf5\x06\xf5\x1e\xa6\xd7\xac\x03\xbe\x98\x3d\x6b\xc4\xab\x6d\x9c\x11\xbc\x88\x39\xc6\x1d\xd2\xf6\x9f\xd4\xa1\xd0\xe5\x71\x99\x70\x0f\x18\xa1\xb4\x16\x3d\x08\x0d\xf3\xb0\x1b\xa1\x0d\x48\x25\xda\x97\x54\xc7\x5e\xd4\x08\x73\xa9\xa6\x28\xdf\xae\x37\x8d\x90\x2c\x10\xfd\x32\xf8\x6d\xfd\xfe\x28\x66\x51\x47\x4d\xad\xab\x94\xc6\xff\x93\x62\x61\xa3\x83\xf2\xd4\x5b\x98\xe4\x9d\x0b\x1c\x9c\x49\x7a\xb6\xfc\x65\xda\x4d\x4c\x45\xe8\x0e\x1c\x62\xab\xae\xe9\xc7\x6f\x0d\xa8\x05\xa8\x4e\x24\x5f\x94\x42\xe3\x61\x60\x8f\x9f\xbe\xd8\xae\xe1\x6e\x2c\xe6\x56\xb9\x11\xf9\x04\xa4\x8c\x73\x10\x74\xb0\xdb\x0a\x0c\x9b\x0b\xec\x7f\x44\xa5\x00\x11\x01\x00\x01\xfe\x03\x03\x02\x2d\x6e\x47\x19\xb9\xf1\x9a\x0c\x60\x96\xb4\x48\xc8\xbf\x26\xf1\xb8\x53\x48\xb3\x4b\xca\xa2\x53\x7f\xc1\xf7\xbf\xc9\x27\x7d\x89\x71\x1b\x5c\x37\x9d\xb4\xc8\x37\x2a\x1f\x95\x55\x5b\x99\xb4\x62\x78\x22\x14\x21\x6b\x85\xf2\xd3\x4b\x65\x5e\x05\x35\xae\xc0\x2e\xd5\xe1\x09\xd6\xc2\x6f\xd0\x35\xec\xbd\x9c\x5a\x2f\x4a\x04\xe9\x52\xba\xc3\x1d\x29\x49\x4d\x81\x4d\x1f\xd5\xe2\x74\xe3\xa0\x1f\x4c\xf3\xc3\xa4\x0e\x1b\x59\xcc\x73\x3f\x8e\x23\xd0\xa3\x16\xf1\x28\x52\x99\x1b\x06\x70\x7f\x23\xf5\xf3\x94\xc3\x88\xa3\x0c\x75\xc4\x97\xae\x62\x6d\x71\x8e\x05\xa7\xeb\x36\xb7\x9e\xeb\xd2\x65\xd3\x3d\x5e\xc6\x15\xe5\xcf\x43\x2f\x4c\xd8\xff\x41\xa9\xf1\xd3\xf7\x88\x02\xad\xfa\xb0\xa3\x9b\x0f\x48\x47\xed\xd8\xda\xda\x31\xf2\x7e\xd8\xc4\xf7\x86\x4f\xa7\x52\x43\xa7\x2c\x46\xe9\x5d\x32\xd8\x63\x1e\x37\x38\x69\x11\xbb\xdf\x7e\xc3\xdb\x7d\xdb\xfa\x8d\x1c\xe7\x36\x43\xc3\xe0\x7e\x30\x0b\x2e\xc9\xc9\x13\x7c\x82\x48\xb8\x50\xd6\x3f\xe1\xc1\x6c\x07\x20\x20\xd4\x19\x86\x19\xb7\x32\x98\x52\x3d\x5b\x6b\xb9\xfe\x5f\x52\xc0\xaa\x3f\x65\x2c\x02\x8d\x11\x8f\xb6\x95\xf9\xd1\xf9\x3d\xf8\x90\x35\xf1\x48\xad\xf6\xdf\xee\x60\xe8\x82\x61\xc7\xf4\x1b\xd9\x49\x62\x22\x06\x9f\x63\xfe\x89\x83\xab\x47\x53\x9d\x7d\x28\x41\x16\xda\x81\xd6\x41\xc0\x87\xf5\x19\x46\xf3\xe5\x31\x81\xd8\xb2\xdc\x26\x11\xe9\xbe\x33\x6a\x90\xa5\x19\x5f\xcd\x52\xd9\x74\xd1\x2d\xee\x7f\xf3\x0a\x6b\xcf\x57\x93\xea\xb7\x38\xc6\x10\x78\x14\x0c\x89\x45\xcb\xc3\x50\xfd\x89\x61\x57\xab\x66\x2b\x33\x9b\x51\x14\xdc\x6c\x1f\xe6\x92\x12\xf6\x26\xfc\xc1\xa0\x09\x6e\x6f\xc2\xe7\x05\xec\xf8\xab\x12\x17\x81\x9b\x5b\xcd\xc3\xfc\x37\x9f\x26\xbd\xab\x95\x0b\xf0\x07\xcc\xe0\xe6\x11\x39\xe2\xdf\xba\xe6\x32\xa4\x1a\xc7\xa1\xd9\x41\xc5\xc6\xea\xed\x59\x67\x37\x91\x8c\x73\x34\x1f\x33\xa0\xa1\xab\xc0\xaf\x95\xed\x50\x0b\x19\x3a\x89\xbb\xea\x95\x4a\x8c\xae\x94\xd4\x5d\x53\xb4\xf0\xbf\xdd\xac\xd3\x27\x63\x78\x94\x55\xd0\x20\x25\x95\x49\xe1\x81\x33\x0e\x03\x77\xb0\x2a\xa8\x91\x31\xba\x62\xc0\xab\x25\x99\x17\x77\xd1\x92\x95\x1b\x8b\x95\x03\x94\x79\xe7\x02\x34\x57\xc9\xd0\x72\xd3\xf2\x9e\xe6\xa1\xe5\x55\xc9\x5b\x6f\x4c\xc8\x7d\x26\xfc\x35\x02\xb4\x5c\xd1\xfc\x30\x33\xa9\x9f\xc3\xa6\x58\x38\xb8\xf3\xbe\x7a\xf9\x41\x28\xe3\xbd\x11\x9b\x97\x41\x13\x9c\xd8\x92\x7b\x34\xd2\xfc\x74\x58\x4d\x7c\x5a\x44\x6e\xfa\xbb\x50\xc7\xd7\xfc\x9f\x7a\xac\xf6\xe9\x01\x49\x9d\xd6\x5e\xf7\x1b\x8b\x67\x56\xcb\xc0\x3e\xac\xb2\x80\xb7\x86\x58\x44\x6d\xaa\x86\x85\x1d\xb9\x6c\x93\x46\x59\xc1\xf1\x12\xa4\xe7\xbc\xde\xf4\x4f\x00\xcc\x1b\x07\x0f\xa9\x16\x4b\x58\x81\xcc\x89\x28\x5b\x1e\x14\x21\x0a\x43\x01\x73\x2a\x20\x25\xf5\x65\x38\x79\x60\x0a\x28\x86\x5c\x2c\x38\xbb\xd3\xf6\x7a\x34\x4b\x5f\x65\x3b\x42\xef\x8d\x94\x04\x4d\x52\xde\x6b\x79\xc2\x9f\xa4\x9d\xd7\xb2\x88\xc3\x06\xff\x24\x3c\x85\x6e\x53\x3e\xb9\xb4\x1f\xd8\x2e\xe1\xab\xb4\x18\x54\x65\x73\x74\x65\x72\x20\x3c\x74\x65\x73\x74\x40\x6e\x6f\x6d\x61\x69\x6c\x2e\x63\x6f\x6d\x3e\x89\x01\x3e\x04\x13\x01\x02\x00\x28\x05\x02\x55\x3f\x9b\x4e\x02\x1b\x03\x05\x09\x01\x8b\x82\x00\x06\x0b\x09\x08\x07\x03\x02\x06\x15\x08\x02\x09\x0a\x0b\x04\x16\x02\x03\x01\x02\x1e\x01\x02\x17\x80\x00\x0a\x09\x10\xab\xbd\x8c\xa5\xa4\x35\xd6\x86\x60\x7f\x08\x00\xa6\xd6\x18\x6f\xbb\x78\xb0\x92\x9f\xd6\x7e\x13\x46\xe0\x08\xa6\xcf\xb3\x30\xc2\xbd\x56\xf0\x1c\x2e\x7b\x18\x23\xa3\x1e\xc6\xa8\x7f\xa2\xeb\xee\x67\xcf\x56\xdf\xac\x5c\xec\xa4\xcb\x76\xaf\x00\x35\xf6\x31\x86\xac\xc9\x48\x30\xe8\x59\x68\x98\x73\x0b\x23\xb5\x7e\xf0\x29\x4c\x4d\x14\x54\xb8\x2f\x3b\x99\x1d\x22\x22\x2b\x19\x11\x8f\x43\x32\xdf\x18\x10\xb9\x87\x84\x63\x43\x6b\x8d\x5e\xa2\xe7\x09\x13\x2b\x70\xc6\xcd\xc1\xe8\x6e\x7f\x61\x04\xb4\x88\x32\x29\x7c\x3a\x79\xa5\xbe\x71\xf6\xd0\x10\x64\x88\x7f\x49\xc1\x23\xb7\xe1\x87\xda\x09\xc0\x49\x0d\xe2\xbc\x1b\x08\x7d\xe7\xc4\x16\x2e\x04\x4e\x70\x2d\x3b\x29\x7d\x4b\x30\x7b\x37\xfc\xaf\xf0\x95\xff\xed\x5b\xec\x6f\x25\xf7\xe2\xda\x1e\xb0\xea\x86\xa7\x86\x46\xcd\xbd\xd2\x19\xe4\xe6\x73\xf7\x51\x05\x63\x76\xf9\x03\x4f\x5e\xbb\x5d\x27\x5a\x6b\x88\x68\x35\xee\x73\x6b\xc6\xab\xe2\x84\x16\x33\xe8\xb9\xa1\x0c\x6f\xed\x87\xbc\xe4\xb4\xa1\xe4\x25\x5a\xd5\x7d\x83\x77\x61\x59\x62\xa5\x8b\x73\x19\x10\xdb\xd0\x7d\x24\x46\x99\x3c\xf0\x2f\x1d\x58\x36\x47\xab\xc0\x8f\xc8\x7a\x2e\x2d\x04\x9d\x03\xbe\x04\x55\x3f\x9b\x4e\x01\x08\x00\xa4\xaf\x33\x91\x88\x85\x23\x2e\x64\x69\xb5\x6d\xb6\xbd\x97\x93\xa0\x18\x20\x36\x8c\x7f\xb5\x46\x86\x5a\x2a\xba\x02\x5f\xf8\x61\xf0\xbc\xe9\x0d\x98\xb3\xec\x6c\xa7\x22\x08\xea\xa8\xa5\x0e\xd8\xdf\x96\xb0\x9f\x4e\x43\x89\xcb\xd8\xba\x25\xcd\x46\x44\x19\x0f\xd3\x92\x30\x17\x84\xb5\xa2\x2a\x57\x35\xba\x3f\x41\x37\xba\x01\x13\x7d\x26\x15\xd9\xdb\x55\xf1\x69\x59\xb8\xaa\xd2\xf9\xd5\x00\x2b\xa3\x4f\x5e\x35\xa3\x83\x56\xa3\x1f\x44\xf3\x47\xf2\x68\x46\xc0\x66\x5b\x9c\x49\x0f\xdb\x43\xdd\x02\x7f\x75\x52\x35\xcd\x1a\x42\x12\xe8\xea\xce\x98\x68\x65\x13\x15\x5e\x15\x67\x31\x7c\x11\xac\x4e\xf5\xfe\x8c\xee\x16\xaf\x5e\x2f\xec\xec\xd7\x37\x74\xab\x92\x13\x8e\xf7\x6f\x10\x2e\x03\x33\x34\xf1\x08\x9c\xf1\x4b\x74\xbe\x4d\x65\xdc\x99\x9c\xc3\x15\xe0\x2e\xdd\x4b\xd8\xcf\x4b\xdd\xd8\xab\x2d\xf3\xea\x95\x29\xa7\x0d\x67\x4d\x9a\x41\xd5\x2f\x8e\x27\x93\x89\x11\xfa\x3c\xd3\xe0\xef\x8c\xcc\xeb\x13\x18\xd8\x3a\x78\xd7\xd7\xa9\xce\xe5\x02\x31\xcc\xfc\x60\xb8\x14\x59\xf0\x3e\x5d\xe9\x66\xf5\x67\xc6\xb0\xab\x7a\xaa\x0b\xf5\x9b\x7d\x98\x15\x00\x11\x01\x00\x01\xfe\x03\x03\x02\x2d\x6e\x47\x19\xb9\xf1\x9a\x0c\x60\xf8\xd7\x2b\x5d\x51\x29\x80\x99\xb1\x8a\xe3\xa5\x5a\x19\x41\x9d\xd8\x04\x54\xba\x17\x14\xae\xf1\x8b\xf0\x9d\x14\x64\xb1\x0e\x6f\x23\xc9\x3c\x05\x7b\x9a\x9b\xa1\x36\x71\x8b\xa3\x8d\x33\x7e\x6f\x03\x2e\x2d\x9d\xd8\xae\xa5\x97\xe3\x40\x80\x22\x89\x4d\x8d\x92\xfd\x8a\x05\xe4\xba\x91\xe5\x6f\xb2\x54\x3b\xfa\x7d\x62\x76\xdd\x12\x9b\xb2\x2d\x92\x85\x6b\xed\x53\xf4\x86\xfc\xaf\xa1\xe5\x2f\xc8\x89\xe9\x01\xdf\x3e\xec\x89\x5c\x9e\xdd\x56\x3d\x86\xc1\x53\x9b\xd3\xe6\x5e\x67\x02\x93\x7f\xc0\x8b\x5b\xd6\x0c\xe7\x83\xd2\x68\x8b\xe4\x3f\xb1\x9a\xf2\x8a\x6f\x99\x08\xf3\x9d\xd3\x88\xde\x92\xaa\x2e\xe6\x13\x5e\xb5\xef\x9a\x35\x4e\x63\x33\x0e\xb4\x3e\xd0\x86\xf4\x01\xcf\xe0\x97\x2d\xcf\x64\x92\x27\x45\x32\x6e\x0d\x53\x37\x9b\xff\xee\xa1\xf6\x63\x2f\xa8\xb2\xaf\x3b\xc8\x03\xfe\x16\x47\xbb\xd6\x4d\x47\x0e\xeb\x4b\x8c\x63\x31\x6a\xfe\xf5\xb8\xff\x5d\xaf\x1b\x27\x3d\xee\x85\x8c\x28\xf9\xc3\x5a\x7f\xea\xfe\x4f\xfb\xc7\x86\xf2\x52\xe5\xec\xe1\x86\x90\x03\x5c\xad\xc0\x2e\xfd\x8e\x3d\x0c\xf8\x97\x16\x38\xa1\xd5\x05\xe5\xf0\x62\xa7\x8f\x5c\x6a\x77\x39\xfc\x46\xcb\x31\x0f\x49\x51\xc5\x60\x99\x01\xf8\xb9\xa1\xf7\xe9\x9c\x35\xde\x03\xd1\xc5\x81\xbe\x81\xea\x82\x66\xd0\x04\xf4\xfb\x39\x56\x7f\x70\xf6\xd7\x47\x18\x06\x56\x91\xdf\xdd\xc6\x23\xa8\x01\xff\x52\x99\xe1\x02\xe1\xdf\x7d\x6a\xdc\x49\x88\x95\xd0\x89\x04\xe5\xce\xf1\x08\x8c\x87\x1b\x19\x80\xb9\x56\x98\x69\xd3\x3c\xa2\xdb\x00\xc8\x8f\xb6\x64\xb3\x08\xd8\x50\x87\x64\x16\x6a\xd7\x9e\xaf\x1b\x33\xfb\x9e\x20\xb9\xcb\xb3\x65\xeb\x22\x65\x99\x4d\x94\xff\x00\x15\x2f\x0e\x4e\xa8\x10\x76\xa9\x2d\x91\x56\x8c\x7a\x67\x21\x13\xdc\x9c\xc7\xd9\x74\x71\xe6\x09\xfc\xb3\x9a\x62\x8e\xc9\xba\x69\xb1\x48\x7c\xd8\x97\x5b\x39\xd1\x4e\xec\xe0\x43\xfb\x58\x92\x38\x5e\x55\xa6\xb8\xd6\x93\x4f\x43\x73\x64\xf6\x11\x9b\x6f\x42\xdc\x6d\xee\x1d\xbf\xec\x85\x77\x42\xd6\x6b\xb4\x4d\x2f\xed\x07\x42\xa2\x17\xb0\x7a\xa8\x12\x04\x30\xff\xda\x63\xa4\xde\xa5\x60\x7d\x28\x7f\xd1\x01\xbc\x05\x23\xdf\x0a\xa4\x0b\xab\x62\x0b\xd3\x8b\x1f\x5e\xad\xd3\xac\xbe\x84\xa8\xb3\xd7\xa6\xf0\xff\xed\xfb\x0a\x57\x4b\x5a\x94\xef\x80\xf8\xfd\x08\x3a\xe3\xca\x17\x10\xa5\xdc\x5f\x62\x19\x87\x82\x17\xe8\x22\xcb\x00\xd9\xd6\x09\xbc\x5f\x45\xc3\xe4\xd4\x2d\x11\x17\x8e\x02\x95\x65\x28\xb4\x80\x82\x6f\xff\xa1\x9f\x7e\xd3\x8c\x53\x0c\x83\x49\xa0\xb2\xb3\xcd\xab\x92\x6a\x9f\x39\xd0\x3b\x6d\x58\x87\x6e\xdf\xdf\xa1\xba\x2a\x4f\xaf\xf0\xd5\x13\x06\x3b\x09\x1e\x61\xa9\x87\x85\xd3\x0c\xb1\x81\xbd\xdf\x4a\x95\xd2\xac\xa2\xb3\x47\xd6\x7d\xdd\x69\xac\xbf\x7b\xc5\xf9\xeb\x29\xb1\x31\x3c\xbe\x4e\xa7\xd4\x6c\x5a\x78\xcf\xa6\x6e\x36\xee\x42\x83\xb9\x0d\x63\x48\x1b\x84\x91\x0f\xbd\x50\xed\xa2\x7b\x67\xb2\x30\x1b\x5f\x9e\xd8\x97\x89\x89\x7f\x58\x5b\x1b\x08\xa0\x3c\x6b\xc3\xb1\x99\x74\xd0\x33\x8e\x9a\xb3\x3e\x8a\x89\x01\x25\x04\x18\x01\x02\x00\x0f\x05\x02\x55\x3f\x9b\x4e\x02\x1b\x0c\x05\x09\x01\x8b\x82\x00\x00\x0a\x09\x10\xab\xbd\x8c\xa5\xa4\x35\xd6\x86\x65\xe6\x07\xff\x4c\xf5\x44\xf4\x23\x33\xe3\x60\xe8\xdf\x82\x98\x82\xca\x87\xc4\x23\xa3\x85\x3a\xdc\xb5\xe0\x6c\xa3\x82\xee\x01\xc0\x87\x1e\xc3\xaa\x27\x27\x51\xf0\xb5\x79\xef\x18\xc5\x70\xa4\x5f\xff\x62\x3e\xe9\x0a\xbe\xf4\x49\x6a\xfb\xab\xe6\xf8\x64\x83\x33\x7c\x86\xce\xf9\xac\xf4\x53\xe6\xa7\xc5\xe1\x21\x06\x50\xbd\x01\x3d\x33\x10\x3d\xd6\x8a\xdb\x1a\xdf\xba\xff\x98\xb9\xa5\x24\x8c\xc6\xd8\xa2\xf8\x75\x6c\x44\x28\xde\x44\x47\x47\x4f\x66\xaa\x84\xa7\x69\x5d\x96\x01\xdc\x3f\x05\x70\x84\xc2\xde\xae\x2f\xdf\x79\xc2\x42\x75\xd6\x04\xdc\x31\x11\xa6\x2b\x96\x8a\x7c\xc2\xfa\xa8\x68\x56\xa2\x9a\x29\x70\x42\xef\x63\x49\x8c\xc6\x25\xa7\x9e\x08\xa4\x7e\x7b\x60\x96\x6e\x69\xcc\xc3\xbd\x73\x6e\x3c\xc4\x89\x74\xf5\x27\x2b\xac\x7a\xb9\x7e\x9d\xc1\xdf\x8b\x19\x64\x22\x2e\x47\x30\xe6\x48\x41\x43\x29\xce\x98\xc6\x45\x00\xe2\xff\xd3\x9f\x3d\x6c\x35\xe2\x98\xad\x5e\x2f\x7b\xa7\xd2\xe8\x9d\x92\xc2\x9a\x1d\x1b\x0c\x21\x84\xce\x88\xd5\xf8\x82\x99\xc0\x8b\xe0\x0d\x3f\x2f\x1b\x5d\x7b\xf4\x92\x41\x0c\x8c\x59\x95\xb3\x5e\xda\x26\x2d\xdb\x9b\x04\x7d"
, 2565);


const std::string zipped = std::string("\xA1\x02\xD5\x01\x9B\xC0\xCB\xCC\xC8\xC1\x98\x7C\xFC\x59\x9B\xF6\x71\xC5\x58\xC6\x35\xAB\x4B\x39\x53\x73\x13\x33\x73\xF4\x4A\x2A\x4A\x42\x9B\x52\x1F\xD8\x64\x94\xE4\xE6\xD8\xD9\x64\xA4\x26\xA6\xD8\xF1\x72\xD9\xE4\xA6\x96\x24\x2A\x64\x94\x94\x14\xE8\xA6\x16\x96\x66\x96\xD9\x2A\x25\xE7\xE7\x95\xA4\xE6\x95\xE8\x96\x54\x16\xA4\x2A\x29\x40\x79\xB6\x4A\x25\xA9\x15\x25\xFA\x20\xAD\xD6\x0A\xC9\x19\x89\x45\xC5\xA9\x25\xB6\xA5\x25\x69\xBA\x16\x4A\x76\x36\xFA\x60\xB3\x6C\x92\xF2\x53\x2A\x15\x92\xD2\x93\xF3\x73\xF2\x8B\x6C\x95\x94\xDD\xC0\x40\x49\x01\xA4\x11\xC8\x35\x00\x03\x25\xBB\x92\xD4\xE2\x92\x43\x0B\x40\x50\xC1\x26\xA9\x08\xA8\x19\xA4\x0D\x64\x06\xC8\x55\x9D\x4C\x32\x2C\x8C\x8C\x1C\x0C\x6C\xAC\x4C\x20\xA7\x32\x70\x71\x0A\xC0\x3C\x12\xFE\x80\xFF\x7F\x42\x7D\x46\x2E\xAF\x85\xB2\x9A\xCF\xD1\xB3\x45\x75\xF6\xA6\x4F\x77\x8A\xDB\xFB\x54\xCE\x3B\xC2\xBF\xE8\x5C\x56\x36\x6F\xE7\x92\x63\xB1\x2E\xB2\x3E\xB3\x2F\xBE\xE3\x3B\x33\xEF\xFF\xF4\x1B\x66\xE6\x8A\x3A\xBE\x91\x93\x26\xEA\x6F\x8F\xF9\x1B\xC9\x3D\x49\x67\x73\xEB\xA7\x13\x96\xCE\xD2\x16\x57\xCC\xEE\x1B\xF6\x1C\x97\xAD\x66\x13\x56\x92\xD3\xD4\x9D\x7B\x63\xF2\x72\xD9\xB6\x36\xBD\xC5\x1F\x4D\xDF\xC5\xCC\xAF\xDD\x28\x7A\xE1\x02\x83\xF5\xAD\x9B\x8B\xDD\xCC\xE6\x47\x5F\x5E\x75\x71\xF7\x14\x96\x8F\xCF\xF7\xF4\xBC\xD9\xC2\x73\x32\xDE\xA0\xED\xFD\xE2\x69\x1F\x7F\xFD\x64\x37\x88\x52\x34\xF1\xCE\x6C\x3C\xB3\x79\x8E\x96\x9D\xCD\xCB\xF3\xAB\x3C\x95\xE2\x4C\xAD\x56\x4F\x0C\x32\xEC\x7B\x11\xA0\x69\x93\x33\xBB\x67\xB5\xC2\xF3\xAA\x33\xCE\x21\x5F\x54\x2F\x6E\xB9\x75\x8E\x7D\x33\x7F\xD5\x9B\x82\xD7\x15\xDE\xEF\x3E\x4B\xD8\xB5\xF0\xFE\x49\xDE\x70\xEC\xA1\xA0\xE7\x95\x4B\xA2\x41\x5E\xED\x6F\xFC\x52\x4D\xEE\x8A\x54\x9C\x39\xB1\x5C\x99\x5D\xD7\xAD\xAC\x78\xD2\xCC\x49\x37\xD6\x89\xEC\xED\x79\xBB\xC8\x38\x48\x5A\xFF\x75\x8B\x66\xC2\x95\xDB\xAA\x57\x97\xF4\xB5\x16\x6E\x74\x69\x55\x72\x4D\xBC\xA2\x6D\xB9\x89\x79\x8A\xBB\x56\xFD\xE4\x3C\x91\xA9\x71\x31\x69\x69\x72\x2F\x98\xBF\xD9\x1E\xA8\xDB\xCD\xFA\xE8\x5E\xD0\xFE\xF6\x84\x53\x1B\x95\x8B\xA4\x99\xFB\x76\xAC\x3E\xF5\xE7\x85\xC2\xEA\x2E\x81\xFF\xE2\x33\x35\x27\x9D\x5B\x93\xAE\x30\xCF\x67\x46\x69\xDE\xDA\xA0\x49\x8C\x93\x85\xC3\xFF\x32\x2C\x29\x3F\xB7\x4E\x67\x9B\xCA\x37\xE3\xEF\xEE\x4C\x47\xF4\xF5\xFE\xD6\x6D\x2D\x3B\x97\x71\xF9\xDD\xE5\x33\xFF\x94\xCF\xB9\x6D\x78\xE7\x6B\x7C\x5E\x6D\x23\x5B\xA5\xD3\xF4\xF7\xB1\x6C\x3A\xE7\xDB\x7F\xFB\xE5\x1C\xE3\x4C\xE0\xFE\x16\x6E\x1E\xDC\x79\xF9\xDF\x7F\x3D\x5F\x0D\x8E\x83\xAA\x0B\x93\x3A\x39\xF5\xBF\xAA\xFD\xF3\x53\x66\xFD\xDA\xAB\xF7\xF7\xD5\x1F\x6B\xD6\xF7\x13\x3B\xFF\x14\xDC\xD8\x3B\xED\xEB\x8D\x9C\xB7\xA9\xF6\x99\xD5\xB7\x3B\x76\x32\xBD\x78\x1E\xC3\xB2\xB4\xCC\xB7\xB0\xB5\xA7\x56\xEC\xEA\x42\x8D\x35\x82\xE5\x5E\x4D\x0D\xF6\x47\x3F\x54\x34\x8B\xBC\xD9\xD7\xB3\xE2\xDF\x8A\x4F\x19\x3D\xB2\xA6\xAC\x8E\xC5\xEC\xDE\xB7\x6A\xFC\x84\x6F\x15\xBC\xFC\x90\x1C\xFA\x55\x32\xCB\xEB\x43\xD0\xD5\xBF\x9F\x7B\xB2\x7B\x77\x78\xEB\xB2\xDC\x14\x6B\x6C\xEC\xA8\x78\xF6\xFB\x01\x00\xD3\x14\xB2\x4D\xF1\x1C\x95\x1F\xAD\xD2\x66\xAD\xC0\x61\xA4\xB6\x10\x51\xE4\x12"
, 748);


class PgpTest : public ::testing::Test {
 protected:
  BIO *key;

  virtual void SetUp() {
    key = BIO_new_mem_buf((char*)privateKey.c_str(), privateKey.length());
  }

  virtual void TearDown() {
    BIO_free(key);
  }
 public:
  static bool keyCheck(PKT_secret_key* key){
    RSA rsa;
    rsa.n =BN_dup(key->pkey.n);
    rsa.e =BN_dup(key->pkey.e);
    rsa.d =BN_dup(key->dBN);
    rsa.p =BN_dup(key->pBN);
    rsa.q =BN_dup(key->qBN);
    rsa.iqmp = NULL;
    rsa.dmp1 = NULL;
    rsa.dmq1 = NULL;
    rsa.engine = NULL;
    return (RSA_check_key(&rsa));
  }
};

// TEST_F(PgpTest, CmdPiper){
//   std::string result;
//   std::string input("This is the test");
//   std::string output;
//   const char *cmd[] = {"cat", NULL};
//   int status = CmdPiper::runCmd(result,(char**) cmd, input); 
// //   std::cout<<"===0= "<<status<<  std::endl;
//   ASSERT_TRUE(result.compare(input)==0);
//   CmdPiper::deleteSecretKey("pkordy@gmail.com");
//   CmdPiper::deleteKey("pkordy@gmail.com");
//   status = CmdPiper::importKey(privateKey);
// //   std::cout<<"===1= "<<status<<  std::endl;
//   ASSERT_TRUE(status==0);
//   status = CmdPiper::getPublicKey(output, "pkordy@gmail.com");
// //   std::cout<<"===2= "<<status<<" out="<<output.length()<< std::endl;
//   ASSERT_TRUE(status==0);
//   ASSERT_TRUE(output.length()!=0);
//   status = CmdPiper::getSecretKey(output, "pkordy@gmail.com");
// //   std::cout<<"===3= "<<status<<" out="<<output.length()<< std::endl;
//   ASSERT_TRUE(status==0);
//   ASSERT_TRUE(output.length()!=0);
//   status = CmdPiper::deleteSecretKey("pkordy@gmail.com");
// //   std::cout<<"===4= "<<status<<  std::endl;
//   ASSERT_TRUE(status==0);
//   status = CmdPiper::getSecretKey(output, "pkordy@gmail.com");
// //   std::cout<<"===5= "<<status<<" out="<<output.length()<< std::endl;
//   ASSERT_TRUE(status==0);
//   ASSERT_TRUE(output.length()==0);
// //   ASSERT_TRUE(output.length()==0);
//   status = CmdPiper::deleteKey("pkordy@gmail.com");
// //   std::cout<<"===6= "<<status<<  std::endl;
//   ASSERT_TRUE(status==0);
//   status = CmdPiper::getPublicKey(output, "some user");
// //   std::cout<<"=7= "<<status<<" out="<<output.length()<< std::endl;
//   ASSERT_TRUE(status==0);
// }
// 
// TEST_F(PgpTest, EncryptDecrypt){
//   std::vector<std::string> users;
//   users.push_back("pkordy@gmail.com");
//   std::string output;
//   std::string mail = "test of the email";
// //   const char* rec = "pkordy@gmail.com";
//   std::string sender = "pkordy@gmail.com";
//   int32_t status;
//   CmdPiper::deleteSecretKey("pkordy@gmail.com");
//   CmdPiper::deleteKey("pkordy@gmail.com");
//   status = CmdPiper::importKey(privateKey);
//   std::cout<<"=1== "<<status<< std::endl;
//   ASSERT_TRUE(status==0);
//   std::string encrypted;
//   status = CmdPiper::encryptMsg(encrypted, users, mail);
//   std::cout<<"=2== "<<status<< std::endl;
//   ASSERT_TRUE(status==0);
//   std::string decrypted;
//   status = CmdPiper::decryptMsg(decrypted, users[0], encrypted);
//   std::cout<<"=3= "<<status<< " plain txt:"<<decrypted<< std::endl;
//   ASSERT_TRUE(status==0);
//   ASSERT_TRUE(decrypted.compare(mail)==0);
//   status = CmdPiper::encryptSignMsg(encrypted, users, sender, mail);
//   std::cout<<"=4= "<<status<< std::endl;
//   ASSERT_TRUE(status==0);
//   status = CmdPiper::decryptMsg(decrypted, users[0], encrypted);
//   std::cout<<"=5= "<<status<<  std::endl;
//   ASSERT_TRUE(status==0);
//   ASSERT_TRUE(decrypted.compare(mail)==0);
//   std::string signedMsg;
//   status = CmdPiper::signMsg(signedMsg,"pkordy@gmail.com", mail);
//   ASSERT_TRUE(status==0);
//   status = CmdPiper::encryptMsg(encrypted, users, signedMsg);
//   std::cout<<"=6= "<<status<< std::endl;
//   status = CmdPiper::decryptMsg(decrypted, users[0], encrypted);
//   std::cout<<"=7= "<<status<<  std::endl;
//   ASSERT_TRUE(status==0);
//   ASSERT_TRUE(decrypted.compare(signedMsg)==0);
//   ASSERT_TRUE(status==0);
//
//   status = CmdPiper::deleteSecretKey("pkordy@gmail.com");
//   std::cout<<"=8= "<<status<< std::endl;
//   ASSERT_TRUE(status==0);
//   std::cout<<"=9= "<<status<< std::endl;
//   ASSERT_TRUE(status==0);
//
// }

TEST_F(PgpTest, ZipTest){
  std::vector<PACKET> subpackets;
  Confi_Status status = PacketParser::parsePackets(subpackets,  zipped);
//   status = handlePlainPkt(decrypted, subpackets, sender, pubDb);//verifies signature
  ASSERT_TRUE(status == ANG_OK);
}

TEST_F(PgpTest, KeyDb){
  ASSERT_TRUE(PktDo::checksum("\xFF\xFF\xFF\xFF")==1020);
  KeyDb keyDb;
//   key = new SecretKeyPair;
  const std::string email = "pkordy@gmail.com";
  ASSERT_TRUE(keyDb.generateRsaKeys(email, ""));
//   printf("key *: %x\n ",(unsigned long int)key);
//   PKT_secret_key* secretSignKey = key->getSSKey();;
  ASSERT_TRUE(keyDb.hasSecretKey(email));
  ASSERT_TRUE(PgpTest::keyCheck(keyDb.getCurrentKey(email)->getSSKey()));
  SecretKeyPair* currKey = keyDb.getCurrentKey(email);
  ASSERT_TRUE(currKey != NULL);
//   printf("currKey *: %X\n ", currKey);
  ASSERT_TRUE(keyDb.writeToFile("db.test"));
  ASSERT_TRUE(keyDb.readFromFile("db.test", true, "") == ANG_OK); //Error here
  ASSERT_TRUE(keyDb.getCurrentKey(email) != NULL);
  currKey = keyDb.getCurrentKey(email);
  std::string fingerprint= currKey->getSSKey()->pkey.fingerprint;
  keyDb.removeKey(fingerprint);
  ASSERT_TRUE(!keyDb.hasSecretKey(email));
  
}


TEST_F(PgpTest, KeyGeneration){

  RSA* skRsa = SecretKeyPair::newRSA();
  skRsa->n = BN_new();
  skRsa->e = BN_new();
  skRsa->d = BN_new();
  skRsa->p = BN_new();
  skRsa->q = BN_new();
  skRsa->iqmp = BN_new();

  BN_CTX *ctx;
  ctx = BN_CTX_new();
  BN_CTX_start(ctx);

  BN_bin2bn((unsigned char *)n.c_str(), n.size(), skRsa->n);
  BN_bin2bn((unsigned char *)e.c_str(), e.size(), skRsa->e);
  BN_bin2bn((unsigned char *)p.c_str(), p.size(), skRsa->p);
  BN_bin2bn((unsigned char *)q.c_str(), q.size(), skRsa->q);
  BN_bin2bn((unsigned char *)d.c_str(), d.size(), skRsa->d);
  BN_mod_inverse(skRsa->iqmp, skRsa->q, skRsa->p, ctx);
//   BN_bin2bn((unsigned char *)u.c_str(), u.size(), skRsa->iqmp);

  ASSERT_TRUE(RSA_check_key(skRsa));

  KeyDb keyDb;
  ASSERT_TRUE(keyDb.generateRsaKeys("pkordy@gmail.com", ""));
  SecretKeyPair* key = keyDb.getCurrentKey("pkordy@gmail.com");

  PKT_secret_key* ssKey = key->getSSKey();;
  SecretKeyPair::assignSecKey(ssKey, skRsa, true, timestamp, (time_t)0, "");
  ssKey->pkey.fingerprint = PktDo::getFingerprint(&(ssKey->pkey));
  PKT_user_id* userId = ssKey->pkey.user_ids.at(0);
  ASSERT_TRUE(userId != NULL);
  userId->signature = NULL;
  SecretKeyPair::getRsaSecretKey(skRsa, ssKey, "");
  SignKey::genSelfSignature(&(userId->signature),  userId, &(ssKey->pkey), NULL,
                            skRsa, SGN_CERT_POS, timestamp,
                            0);
  SecretKeyPair::freeRSA(skRsa);

  skRsa = SecretKeyPair::newRSA();
  skRsa->n = BN_new();
  skRsa->e = BN_new();
  skRsa->d = BN_new();
  skRsa->p = BN_new();
  skRsa->q = BN_new();
  skRsa->iqmp = BN_new();
  skRsa->dmp1 = NULL;
  skRsa->dmq1 = NULL;
  skRsa->engine = NULL;

  BN_bin2bn((unsigned char *)n2.c_str(), n2.size(), skRsa->n);
  BN_bin2bn((unsigned char *)e2.c_str(), e2.size(), skRsa->e);
  BN_bin2bn((unsigned char *)p2.c_str(), p2.size(), skRsa->p);
  BN_bin2bn((unsigned char *)q2.c_str(), q2.size(), skRsa->q);
  BN_bin2bn((unsigned char *)d2.c_str(), d2.size(), skRsa->d);
  BN_mod_inverse(skRsa->iqmp, skRsa->q, skRsa->p, ctx);
  skRsa->dmp1 = NULL;
  skRsa->dmq1 = NULL;
//   BN_bin2bn((unsigned char *)u2.c_str(), u2.size(), skRsa->iqmp);//TODO
  ASSERT_TRUE(RSA_check_key(skRsa));
  if (ctx != NULL){
    BN_CTX_end(ctx);
    BN_CTX_free(ctx);
  }
  unsigned char output[RSA_size(skRsa)];

//
  PKT_secret_key* seKey = key->getSEKey();;
  SecretKeyPair::assignSecKey(seKey, skRsa, false, timestamp, (time_t)0, "");
  seKey->pkey.fingerprint = ssKey->pkey.fingerprint;
  PKT_signature* signature = NULL;
  SignKey::genSelfSignature(&signature,  userId, &(ssKey->pkey), &(seKey->pkey),
                            skRsa, SGN_SUBKEY, timestamp,
                            0);
  key->setBindSig(signature);
  std::string hashed = SignKey::getSelfSigHash(signature, userId, &(ssKey->pkey), &(seKey->pkey));
  ASSERT_TRUE( hashed == SignKey::hash(hashResult, signature->digest_algo));

  SecretKeyPair::getRsaSecretKey(skRsa, key->getSSKey(), "");
  ASSERT_TRUE(RSA_check_key(skRsa) == 1);
  SecretKeyPair::getRsaSecretKey(skRsa, key->getSEKey(), "");
  ASSERT_TRUE( RSA_check_key(skRsa) == 1);
  SecretKeyPair::freeRSA(skRsa);
  std::string message;
  ConfiClient client;
  Confi_Status status;
  key->exportPairToFile("secretKey.test", true);
  key = NULL;
  for(unsigned int i = 0; i<50; i++){
//     std::cout<<"One"<<std::endl;
    keyDb.clearDb();
//     std::cout<<"Two"<<i<<std::endl;
    keyDb.clearDb();

    keyDb.readFromFile("secretKey.test", true, "");
    SecretKeyPair* controlKey = keyDb.getCurrentKey("pkordy@gmail.com");
    skRsa = SecretKeyPair::newRSA();
    SecretKeyPair::getRsaSecretKey(skRsa, controlKey->getSSKey(), "");
    ASSERT_TRUE(RSA_check_key(skRsa) == 1);
    SecretKeyPair::getRsaSecretKey(skRsa, controlKey->getSEKey(), "");
    ASSERT_TRUE(RSA_check_key(skRsa) == 1);
    SecretKeyPair::freeRSA(skRsa);
    message.clear();
    status = MessageHandler::decryptText(message, encryptedMessage, std::string("pkordy@gmail.com"), client.getPubDb(),  keyDb, "");
    ASSERT_TRUE(status == ANG_NO_SIG);
    ASSERT_TRUE(message == "message\n");
    std::cout<<".";
    std::cout.flush();
  }
  std::cout<<std::endl;
  

  
  //**** RSA decrypt ****
  key = keyDb.getCurrentKey("pkordy@gmail.com");
  skRsa = SecretKeyPair::newRSA();
  
  SecretKeyPair::getRsaSecretKey(skRsa, key->getSEKey(), "");
  RSA_private_decrypt(encrRSA.size(), (unsigned char*)encrRSA.c_str(),
                                      output, skRsa, RSA_PKCS1_PADDING);
  ASSERT_TRUE(keyAES.compare(std::string((char*)(output+1), 32)) == 0);
  SecretKeyPair::freeRSA(skRsa);
  EVP_CIPHER_CTX *de = (EVP_CIPHER_CTX *)malloc(sizeof(EVP_CIPHER_CTX));
  EVP_CIPHER_CTX_init(de);
// 
//   
  ASSERT_TRUE(EVP_CipherInit_ex(de, EVP_aes_256_cfb(), NULL, (unsigned const char*)(output+1), NULL, 0));
  int outlen;
  unsigned char plaintext[encrAES.size()];
  EVP_DecryptUpdate(de, plaintext, &outlen, (unsigned char*)encrAES.c_str(), encrAES.size());
  ASSERT_TRUE(EVP_DecryptFinal_ex(de, (plaintext + outlen), &outlen));
  ASSERT_TRUE(prefixAES.compare(std::string((char*)plaintext, prefixAES.size()))==0);

  EVP_CIPHER_CTX_cleanup(de);
//   std::cout<<string_to_hex(MessageHandler::getRandomString(1000000))<<std::endl;
}

TEST_F(PgpTest, EncryptedKeys){
    std::vector<PACKET> packets;
    // generating the key
    const std::string email = "pkordy@nomail.com";
    const std::string mailBody = "From content of the \n- test mail";
    const std::string corrBody = "From content of the \r\n- test mail";
    KeyDb keyDb;
    const char salt[] = "\x2d\x6e\x47\x19\xb9\xf1\x9a\x0c";
    ASSERT_TRUE(keyDb.readFromStr(privateEncryptedKey, true, "") == ANG_OK);
    SecretKeyPair* sp = keyDb.getCurrentKey("test@nomail.com");
    PKT_secret_key* sk = sp->getSSKey();
    ASSERT_TRUE(sk->is_protected);
    ASSERT_TRUE(memcmp(sk->protect.s2k.salt, salt, 8) == 0);
    sk = sp->getSEKey();
    ASSERT_TRUE(sk->is_protected);
    ASSERT_TRUE(memcmp(sk->protect.s2k.salt, salt, 8) == 0);
    
    ASSERT_TRUE(keyDb.writeToFile("db.test"));
    ASSERT_TRUE(memcmp(sk->protect.s2k.salt, salt, 8) == 0);
    ASSERT_TRUE(memcmp(sk->protect.s2k.salt, salt, 8) == 0);
    
    ASSERT_TRUE(keyDb.readFromFile("db.test", true, "") == ANG_OK);

    sp = keyDb.getCurrentKey("test@nomail.com");
    sk = sp->getSSKey();
    ASSERT_TRUE(sk->is_protected);
    ASSERT_TRUE(memcmp(sk->protect.s2k.salt, salt, 8) == 0);
    sk = sp->getSEKey();
    ASSERT_TRUE(sk->is_protected);
    ASSERT_TRUE(memcmp(sk->protect.s2k.salt, salt, 8) == 0);

    std::string exported;
    ASSERT_TRUE(keyDb.writeToStr(exported));
    std::cout<<"exported"<<string_to_hex(exported)<<std::endl;
    std::cout<<"original"<<string_to_hex(privateEncryptedKey)<<std::endl;
    ASSERT_TRUE(exported == privateEncryptedKey);
    
    
    ASSERT_TRUE(keyDb.generateRsaKeys(email, "password"));

    for(unsigned int i = 0; i<2; i++){
      packets.clear();
      Confi_Status status = PacketParser::parsePackets(packets, privateEncryptedKey);
      ASSERT_TRUE(status == ANG_OK);
      ASSERT_TRUE(packets.size() == 5);
      ASSERT_TRUE(packets.at(0).pkttype == PKT_SECRET_KEY);
      ASSERT_TRUE(packets.at(1).pkttype == PKT_USER_ID);
      ASSERT_TRUE(packets.at(2).pkttype == PKT_SIGNATURE);
      ASSERT_TRUE(packets.at(3).pkttype == PKT_SECRET_SUBKEY);
      ASSERT_TRUE(packets.at(4).pkttype == PKT_SIGNATURE);
      SecretKeyPair keyPair;
      
      keyPair.setSSKey(packets.at(0).pkt.secret_key);
      packets.at(0).pkt.secret_key->pkey.user_ids.push_back( packets.at(1).pkt.user_id );
      keyPair.getSSKey()->pkey.user_ids.back()->signature = packets.at(2).pkt.signature;
      keyPair.getSSKey()->pkey.expirePeriod = packets.at(2).pkt.signature->key_expirePeriod;
      keyPair.setSEKey(packets.at(3).pkt.secret_key);
      keyPair.setBindSig(packets.at(4).pkt.signature);
      ASSERT_TRUE(keyPair.getSSKey()->is_protected);
      ASSERT_TRUE(keyPair.getSEKey()->is_protected);
      RSA* rsa = SecretKeyPair::newRSA();
      status = SecretKeyPair::getRsaSecretKey(rsa, keyPair.getSSKey(), "");
      ASSERT_TRUE(status == ANG_WRONG_PASSWORD);
      status = SecretKeyPair::getRsaSecretKey(rsa, keyPair.getSSKey(), "wrong pass");
      ASSERT_TRUE(status == ANG_WRONG_PASSWORD);
      status = SecretKeyPair::getRsaSecretKey(rsa, keyPair.getSSKey(), "password");
      SecretKeyPair::freeRSA(rsa);
      rsa = NULL;
      ASSERT_TRUE(status == ANG_OK);

      ASSERT_TRUE(keyDb.hasSecretKey(email));
//       keyDb.clearDb();
      //Encryption
      std::string encrypted;
      std::set<std::string> users;
      users.insert(email);
      users.insert("pkordy@gmail.com");

      PublicKeyDb publicKeyDb;  //contain public keys
      encrypted.clear();
      ASSERT_TRUE(keyDb.getCurrentKey(email)->exportPair(encrypted, false));
      ASSERT_TRUE(publicKeyDb.importKey(encrypted, email) == ANG_OK);
      ASSERT_TRUE(publicKeyDb.importKey(publicKey, "pkordy@gmail.com") == ANG_OK);
      std::vector<PKT_public_key*> keys;
      keys.push_back(publicKeyDb.getKey(email)->getPEKey());
      keys.push_back(publicKeyDb.getKey("pkordy@gmail.com")->getPEKey());
      
      encrypted.clear();
      status = MessageHandler::encryptData(encrypted
                                           , mailBody
                                           , keys
                                           , CIPHER_ALGO_AES256
                                           , keyDb
                                           , email
                                           , false //binary
                                           , "email.txt" //filename
                                           , "" //password
                                           , false //sign
                                           , true  //armor
                                           );
      ASSERT_TRUE(status == ANG_OK);
      std::string fingerprint;
      status = MessageHandler::checkDecrPassword(fingerprint, encrypted, keyDb, "");
      ASSERT_TRUE(status == ANG_WRONG_PASSWORD);
      status = MessageHandler::checkDecrPassword(fingerprint, encrypted, keyDb, "pass");
      ASSERT_TRUE(status == ANG_WRONG_PASSWORD);
      std::string message;
      status = MessageHandler::checkDecrPassword(fingerprint, encrypted, keyDb, "password");
      ASSERT_TRUE(fingerprint == publicKeyDb.getKey(email)->getPEKey()->fingerprint);
      ASSERT_TRUE(status == ANG_OK);
      status = MessageHandler::decryptText(message, encrypted, email, &publicKeyDb,  keyDb, "password");
      ASSERT_TRUE(status == ANG_NO_SIG);
      ASSERT_TRUE(message == corrBody);
      encrypted.clear();
      status = MessageHandler::encryptData(encrypted
                                           , mailBody
                                           , keys
                                           , CIPHER_ALGO_AES256
                                           , keyDb
                                           , email
                                           , false //binary
                                           , "email.txt" //filename
                                           , ""
                                           , true //sign
                                           , false  //armor
                                           );
      ASSERT_TRUE(status == ANG_WRONG_PASSWORD);
      encrypted.clear();
      status = MessageHandler::encryptData(encrypted
                                           , mailBody
                                           , keys
                                           , CIPHER_ALGO_AES256
                                           , keyDb
                                           , email
                                           , false //binary
                                           , "email.txt" //filename
                                           , "password"
                                           , true //sign
                                           , false  //armor
                                           ); //decrypt self
      ASSERT_TRUE(status == ANG_OK);
      status = MessageHandler::checkDecrPassword(fingerprint, encrypted, keyDb, "password");
      ASSERT_TRUE(fingerprint == publicKeyDb.getKey(email)->getPEKey()->fingerprint);
      ASSERT_TRUE(status == ANG_OK);
      message.clear();
      status = MessageHandler::decryptText(message, encrypted, email, &publicKeyDb,  keyDb, "password");
      ASSERT_TRUE(status == ANG_OK);
      ASSERT_TRUE(message == corrBody);
      message.clear();
      status = MessageHandler::decryptText(message, " "+encrypted, email, &publicKeyDb,  keyDb, "password");
      ASSERT_TRUE(status == ANG_PARSE_ERROR);
      ASSERT_TRUE(message != corrBody);
      
      encrypted.clear();
      status = MessageHandler::encryptData(encrypted
                                           , mailBody
                                           , keys
                                           , CIPHER_ALGO_AES256
                                           , keyDb
                                           , email
                                           , true //binary
                                           , "email.txt" //filename
                                           , "password"
                                           , true //sign
                                           , true  //armor
                                           );
      ASSERT_TRUE(status == ANG_OK);
      status = MessageHandler::checkDecrPassword(fingerprint, encrypted, keyDb, "password");
      ASSERT_TRUE(fingerprint == publicKeyDb.getKey(email)->getPEKey()->fingerprint);
      ASSERT_TRUE(status == ANG_OK);
      message.clear();
      status = MessageHandler::decryptText(message, encrypted, email, &publicKeyDb,  keyDb, "password");
      ASSERT_TRUE(status == ANG_OK);
      ASSERT_TRUE(message == mailBody);
      
      encrypted.clear();
      status = MessageHandler::clearSign(encrypted, mailBody, keyDb, email, "");
      ASSERT_TRUE(status == ANG_WRONG_PASSWORD);
      status = MessageHandler::clearSign(encrypted, mailBody, keyDb, email, "pass");
      ASSERT_TRUE(status == ANG_WRONG_PASSWORD);
      encrypted.clear();
      status = MessageHandler::clearSign(encrypted, mailBody, keyDb, email, "password");
      ASSERT_TRUE(status == ANG_OK);
      message.clear();
      status = MessageHandler::clearSignVerify(message, encrypted, email, &publicKeyDb);
      ASSERT_TRUE(status == ANG_OK);
      
      std::cout<<".";
      std::cout.flush();
    }
    std::cout<<std::endl;
//     free(keys); - not necessary
}

